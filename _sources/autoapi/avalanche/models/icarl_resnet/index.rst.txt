:mod:`avalanche.models.icarl_resnet`
====================================

.. py:module:: avalanche.models.icarl_resnet


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.models.icarl_resnet.IcarlNet



Functions
~~~~~~~~~

.. autoapisummary::

   avalanche.models.icarl_resnet.make_icarl_net
   avalanche.models.icarl_resnet.initialize_icarl_net


.. py:class:: IcarlNet(num_classes: int, n=5, c=3)

   Bases: :class:`torch.nn.Module`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super(Model, self).__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   Initializes internal Module state, shared by both nn.Module and ScriptModule.

   .. method:: forward(self, x)



.. function:: make_icarl_net(num_classes: int, n=5, c=3) -> IcarlNet


.. function:: initialize_icarl_net(m: Module)


