:mod:`avalanche.benchmarks.scenarios.generic_cl_scenario`
=========================================================

.. py:module:: avalanche.benchmarks.scenarios.generic_cl_scenario


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.benchmarks.scenarios.generic_cl_scenario.StreamDef
   avalanche.benchmarks.scenarios.generic_cl_scenario.GenericCLScenario
   avalanche.benchmarks.scenarios.generic_cl_scenario.GenericScenarioStream
   avalanche.benchmarks.scenarios.generic_cl_scenario.AbstractExperience
   avalanche.benchmarks.scenarios.generic_cl_scenario.GenericExperience



.. data:: TGenericCLScenario
   

   

.. py:class:: StreamDef

   Bases: :class:`typing.NamedTuple`

   Typed version of namedtuple.

   Usage in Python versions >= 3.6::

       class Employee(NamedTuple):
           name: str
           id: int

   This is equivalent to::

       Employee = collections.namedtuple('Employee', ['name', 'id'])

   The resulting class has an extra __annotations__ attribute, giving a
   dict that maps field names to types.  (The field names are also in
   the _fields attribute, which is part of the namedtuple API.)
   Alternative equivalent keyword syntax is also accepted::

       Employee = NamedTuple('Employee', name=str, id=int)

   In Python versions <= 3.5 use::

       Employee = NamedTuple('Employee', [('name', str), ('id', int)])

   Create and return a new object.  See help(type) for accurate signature.

   .. attribute:: exps_data
      :annotation: :LazyDatasetSequence

      

   .. attribute:: exps_task_labels
      :annotation: :Sequence[Set[int]]

      

   .. attribute:: origin_dataset
      :annotation: :TOriginDataset

      


.. data:: TStreamsDict
   

   

.. py:class:: GenericCLScenario(: TGenericCLScenario, *, stream_definitions: TStreamsUserDict, complete_test_set_only: bool = False, experience_factory: Callable[['GenericScenarioStream', int], TExperience] = None)

   Bases: :class:`Generic[TExperience]`

   Base implementation of a Continual Learning benchmark instance.
   A Continual Learning benchmark instance is defined by a set of streams of
   experiences (batches or tasks depending on the terminology). Each experience
   contains the training (or test, or validation, ...) data that becomes
   available at a certain time instant.

   Experiences are usually defined in children classes, with this class serving
   as the more general implementation. This class handles the most simple type
   of assignment: each stream is defined as a list of experiences, each
   experience is defined by a dataset.

   Defining the "train" and "test" streams is mandatory. This class supports
   custom streams as well. Custom streams can be accessed by using the
   `streamname_stream` field of the created instance.

   The name of custom streams can only contain letters, numbers or the "_"
   character and must not start with a number.

   Creates an instance of a Continual Learning benchmark instance.

   The benchmark instance is defined by a stream definition dictionary,
   which describes the content of each stream. The "train" and "test"
   stream are mandatory. Any other custom stream can be added.

   There is no constraint on the amount of experiences in each stream
   (excluding the case in which `complete_test_set_only` is set).

   :param stream_definitions: The stream definitions dictionary. Must
       be a dictionary where the key is the stream name and the value
       is the definition of that stream. "train" and "test" streams are
       mandatory. This class supports custom streams as well. The name of
       custom streams can only contain letters, numbers and the "_"
       character and must not start with a number. Streams can be defined
       is two ways: static and lazy. In the static case, the
       stream must be a tuple containing 1, 2 or 3 elements:
       - The first element must be a list containing the datasets
       describing each experience. Datasets must be instances of
       :class:`AvalancheDataset`.
       - The second element is optional and must be a list containing the
       task labels of each experience (as an int or a set of ints).
       If the stream definition tuple contains only one element (the list
       of datasets), then the task labels for each experience will be
       obtained by inspecting the content of the datasets.
       - The third element is optional and must be a reference to the
       originating dataset (if applicable). For instance, for SplitMNIST
       this may be a reference to the whole MNIST dataset. If the stream
       definition tuple contains less than 3 elements, then the reference
       to the original dataset will be set to None.
       In the lazy case, the stream must be defined as a tuple with 2
       elements:
       - The first element must be a tuple containing the dataset generator
       (one for each experience) and the number of experiences in that
       stream.
       - The second element must be a list containing the task labels of
       each experience (as an int or a set of ints).
   :param complete_test_set_only: If True, the test stream will contain
       a single experience containing the complete test set. This also
       means that the definition for the test stream must contain the
       definition for a single experience.
   :param experience_factory: If not None, a callable that, given the
       scenario instance and the experience ID, returns a experience
       instance. This parameter is usually used in subclasses (when
       invoking the super constructor) to specialize the experience class.
       Defaults to None, which means that the :class:`GenericExperience`
       constructor will be used.

   .. attribute:: stream_definitions
      

      A structure containing the definition of the streams.


   .. attribute:: original_train_dataset
      :annotation: :Optional[Dataset]

      The original training set. May be None. 


   .. attribute:: original_test_dataset
      :annotation: :Optional[Dataset]

      The original test set. May be None. 


   .. attribute:: train_stream
      :annotation: :GenericScenarioStream[TExperience, TGenericCLScenario]

      The stream used to obtain the training experiences. 
      This stream can be sliced in order to obtain a subset of this stream.


   .. attribute:: test_stream
      :annotation: :GenericScenarioStream[TExperience, TGenericCLScenario]

      The stream used to obtain the test experiences. This stream can be 
      sliced in order to obtain a subset of this stream.

      Beware that, in certain scenarios, this stream may contain a single
      element. Check the ``complete_test_set_only`` field for more details.


   .. attribute:: complete_test_set_only
      :annotation: :bool

      If True, only the complete test set will be returned from experience
      instances.

      This flag is usually set to True in scenarios where having one separate
      test set aligned to each training experience is impossible or doesn't
      make sense from a semantic point of view.


   .. method:: streams(self) -> Dict[str, 'GenericScenarioStream[TExperience, TGenericCLScenario]']
      :property:


   .. method:: n_experiences(self) -> int
      :property:

      The number of incremental training experiences contained
      in the train stream. 


   .. method:: task_labels(self) -> Sequence[List[int]]
      :property:

      The task label of each training experience. 


   .. method:: get_reproducibility_data(self) -> Dict[str, Any]

      Gets the data needed to reproduce this experiment.

      This data can be stored using the pickle module or some other mechanism.
      It can then be loaded by passing it as the ``reproducibility_data``
      parameter in the constructor.

      Child classes should create their own reproducibility dictionary.
      This means that the implementation found in :class:`GenericCLScenario`
      will return an empty dictionary, which is meaningless.

      In order to obtain the same benchmark instance, the reproducibility
      data must be passed to the constructor along with the exact same
      input datasets.

      :return: A dictionary containing the data needed to reproduce the
          experiment.


   .. method:: classes_in_experience(self) -> Mapping[str, Sequence[Optional[Set[int]]]]
      :property:

      A dictionary mapping each stream (by name) to a list.

      Each element of the list is a set describing the classes included in
      that experience (identified by its index).

      In previous releases this field contained the list of sets for the
      training stream (that is, there was no way to obtain the list for other
      streams). That behavior is deprecated and support for that usage way
      will be removed in the future.


   .. method:: get_classes_timeline(self, current_experience: int, stream: str = 'train')

      Returns the classes timeline given the ID of a experience.

      Given a experience ID, this method returns the classes in that
      experience, previously seen classes, the cumulative class list and a
      list of classes that will be encountered in next experiences of the
      same stream.

      Beware that by default this will obtain the timeline of an experience
      of the **training** stream. Use the stream parameter to select another
      stream.

      :param current_experience: The reference experience ID.
      :param stream: The stream name.
      :return: A tuple composed of four lists: the first list contains the
          IDs of classes in this experience, the second contains IDs of
          classes seen in previous experiences, the third returns a cumulative
          list of classes (that is, the union of the first two list) while the
          last one returns a list of classes that will be encountered in next
          experiences. Beware that each of these elements can be None when
          the benchmark is initialized by using a lazy generator.



.. py:class:: GenericScenarioStream(: TGenericScenarioStream, name: str, scenario: TGenericCLScenario, *, slice_ids: List[int] = None)

   Bases: :class:`Generic[TExperience, TGenericCLScenario]`, :class:`ScenarioStream[TGenericCLScenario, TExperience]`, :class:`Sequence[TExperience]`

   A scenario stream describes a sequence of incremental experiences.
   Experiences are described as :class:`IExperience` instances. They contain a
   set of patterns which has become available at a particular time instant
   along with any optional, scenario specific, metadata.

   Most scenario expose two different streams: the training stream and the test
   stream.

   Initialize self.  See help(type(self)) for accurate signature.

   .. attribute:: slice_ids
      :annotation: :Optional[List[int]]

      Describes which experiences are contained in the current stream slice. 
      Can be None, which means that this object is the original stream. 


   .. attribute:: name
      :annotation: :str

      The name of the stream (for instance: "train", "test", "valid", ...).


   .. attribute:: scenario
      

      A reference to the scenario.


   .. method:: __len__(self) -> int

      Gets the number of experiences this stream it's made of.

      :return: The number of experiences in this stream.


   .. method:: __getitem__(self, exp_idx: Union[int, slice, Iterable[int]]) -> Union[TExperience, TScenarioStream]

      Gets a experience given its experience index (or a stream slice given
      the experience order).

      :param exp_idx: An int describing the experience index or an
          iterable/slice object describing a slice of this stream.

      :return: The experience instance associated to the given experience
          index or a sliced stream instance.


   .. method:: drop_previous_experiences(self, to_exp: int) -> None

      Drop the reference to experiences up to a certain experience ID
      (inclusive).

      This means that any reference to experiences with ID [0, from_exp] will
      be released. By dropping the reference to previous experiences, the
      memory associated with them can be freed, especially the one occupied by
      the dataset. However, if external references to the experience or the
      dataset still exist, dropping previous experiences at the stream level
      will have little to no impact on the memory usage.

      To make sure that the underlying dataset can be freed, make sure that:
      - No reference to previous datasets or experiences are kept in you code;
      - The replay implementation doesn't keep a reference to previous
          datasets (in which case, is better to store a copy of the raw
          tensors instead);
      - The benchmark is being generated using a lazy initializer.

      By dropping previous experiences, those experiences will no longer be
      available in the stream. Trying to access them will result in an
      exception.

      :param to_exp: The ID of the last exp to drop (inclusive). Can be a
          negative number, in which case this method doesn't have any effect.
          Can be greater or equal to the stream length, in which case all
          currently loaded experiences will be dropped.
      :return: None



.. py:class:: AbstractExperience(: TExperience, origin_stream: TScenarioStream, current_experience: int, classes_in_this_exp: Sequence[int], previous_classes: Sequence[int], classes_seen_so_far: Sequence[int], future_classes: Optional[Sequence[int]])

   Bases: :class:`Experience[TScenario, TScenarioStream]`, :class:`abc.ABC`

   Definition of a learning experience. A learning experience contains a set of
   patterns which has become available at a particular time instant. The
   content and size of an Experience is defined by the specific benchmark that
   creates the experience.

   For instance, an experience of a New Classes scenario will contain all
   patterns belonging to a subset of classes of the original training set. An
   experience of a New Instance scenario will contain patterns from previously
   seen classes.

   Creates an instance of the abstract experience given the scenario
   stream, the current experience ID and data about the classes timeline.

   :param origin_stream: The stream from which this experience was
       obtained.
   :param current_experience: The current experience ID, as an integer.
   :param classes_in_this_exp: The list of classes in this experience.
   :param previous_classes: The list of classes in previous experiences.
   :param classes_seen_so_far: List of classes of current and previous
       experiences.
   :param future_classes: The list of classes of next experiences.

   .. attribute:: classes_in_this_experience
      :annotation: :Sequence[int]

      The list of classes in this experience 


   .. attribute:: previous_classes
      :annotation: :Sequence[int]

      The list of classes in previous experiences 


   .. attribute:: classes_seen_so_far
      :annotation: :Sequence[int]

      List of classes of current and previous experiences 


   .. attribute:: future_classes
      :annotation: :Optional[Sequence[int]]

      The list of classes of next experiences 


   .. method:: task_label(self) -> int
      :property:

      The task label. This value will never have value "None". However,
      for scenarios that don't produce task labels a placeholder value like 0
      is usually set. Beware that this field is meant as a shortcut to obtain
      a unique task label: it assumes that only patterns labeled with a
      single task label are present. If this experience contains patterns from
      multiple tasks, accessing this property will result in an exception.



.. py:class:: GenericExperience(: TGenericExperience, origin_stream: GenericScenarioStream[TGenericExperience, TGenericCLScenario], current_experience: int)

   Bases: :class:`AbstractExperience[TGenericCLScenario, GenericScenarioStream[TGenericExperience, TGenericCLScenario]]`

   Definition of a learning experience based on a :class:`GenericCLScenario`
   instance.

   This experience implementation uses the generic experience-patterns
   assignment defined in the :class:`GenericCLScenario` instance. Instances of
   this class are usually obtained from a scenario stream.

   Creates an instance of a generic experience given the stream from this
   experience was taken and and the current experience ID.

   :param origin_stream: The stream from which this experience was
       obtained.
   :param current_experience: The current experience ID, as an integer.

   .. method:: task_labels(self) -> List[int]
      :property:



