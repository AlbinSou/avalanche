:mod:`avalanche.benchmarks.scenarios.generic_scenario_creation`
===============================================================

.. py:module:: avalanche.benchmarks.scenarios.generic_scenario_creation

.. autoapi-nested-parse::

   This module contains DEPRECATED mid-level benchmark generators.
   Please use the ones found in generic_benchmark_creation.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   avalanche.benchmarks.scenarios.generic_scenario_creation.create_multi_dataset_generic_scenario
   avalanche.benchmarks.scenarios.generic_scenario_creation.create_generic_scenario_from_filelists
   avalanche.benchmarks.scenarios.generic_scenario_creation.create_generic_scenario_from_paths
   avalanche.benchmarks.scenarios.generic_scenario_creation.create_generic_scenario_from_tensor_lists
   avalanche.benchmarks.scenarios.generic_scenario_creation.create_generic_scenario_from_tensors


.. function:: create_multi_dataset_generic_scenario(train_dataset_list: Sequence[SupportedDataset], test_dataset_list: Sequence[SupportedDataset], task_labels: Sequence[int], complete_test_set_only: bool = False, train_transform=None, train_target_transform=None, eval_transform=None, eval_target_transform=None, dataset_type: AvalancheDatasetType = None) -> GenericCLScenario

   This helper function is DEPRECATED in favor of
   `create_multi_dataset_generic_benchmark`.

   Creates a generic scenario given a list of datasets and the respective task
   labels. Each training dataset will be considered as a separate training
   experience. Contents of the datasets will not be changed, including the
   targets.

   When loading the datasets from a set of fixed filelist, consider using
   the :func:`create_generic_scenario_from_filelists` helper method instead.

   In its base form, this function accepts a list of test datsets that must
   contain the same amount of datasets of the training list.
   Those pairs are then used to create the "past", "cumulative"
   (a.k.a. growing) and "future" test sets. However, in certain Continual
   Learning scenarios only the concept of "complete" test set makes sense. In
   that case, the ``complete_test_set_only`` should be set to True (see the
   parameter description for more info).

   Beware that pattern transformations must already be included in the
   datasets (when needed).

   :param train_dataset_list: A list of training datasets.
   :param test_dataset_list: A list of test datasets.
   :param task_labels: A list of task labels. Must contain the same amount of
       elements of the ``train_dataset_list`` parameter. For
       Single-Incremental-Task (a.k.a. Task-Free) scenarios, this is usually
       a list of zeros. For Multi Task scenario, this is usually a list of
       ascending task labels (starting from 0).
   :param complete_test_set_only: If True, only the complete test set will
       be returned by the scenario. This means that the ``test_dataset_list``
       parameter must be list with a single element (the complete test set).
       Defaults to False, which means that ``train_dataset_list`` and
       ``test_dataset_list`` must contain the same amount of datasets.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations). Defaults to None.
   :param train_target_transform: The transformation to apply to training
       patterns targets. Defaults to None.
   :param eval_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations). Defaults to None.
   :param eval_target_transform: The transformation to apply to test
       patterns targets. Defaults to None.
   :param dataset_type: The type of the dataset. Defaults to None, which
       means that the type will be obtained from the input datasets. If input
       datasets are not instances of :class:`AvalancheDataset`, the type
       UNDEFINED will be used.

   :returns: A :class:`GenericCLScenario` instance.


.. function:: create_generic_scenario_from_filelists(root: Union[str, Path], train_file_lists: Sequence[Union[str, Path]], test_file_lists: Union[Union[str, Path], Sequence[Union[str, Path]]], task_labels: Sequence[int], complete_test_set_only: bool = False, train_transform=None, train_target_transform=None, eval_transform=None, eval_target_transform=None) -> GenericCLScenario

   This helper function is DEPRECATED in favor of
   `create_generic_benchmark_from_filelists`.

   Creates a generic scenario given a list of filelists and the respective task
   labels. A separate dataset will be created for each filelist and each of
   those training datasets will be considered a separate training experience.

   In its base form, this function accepts a list of filelists for the test
   datsets that must contain the same amount of elements of the training list.
   Those pairs of datasets are then used to create the "past", "cumulative"
   (a.k.a. growing) and "future" test sets. However, in certain Continual
   Learning scenarios only the concept of "complete" test set makes sense. In
   that case, the ``complete_test_set_only`` should be set to True (see the
   parameter description for more info).

   This helper functions is the best shot when loading Caffe-style dataset
   based on filelists.

   The resulting benchmark instance and the intermediate datasets used to
   populate it will be of type CLASSIFICATION.

   :param root: The root path of the dataset.
   :param train_file_lists: A list of filelists describing the
       paths of the training patterns for each experience.
   :param test_file_lists: A list of filelists describing the
       paths of the test patterns for each experience.
   :param task_labels: A list of task labels. Must contain the same amount of
       elements of the ``train_file_lists`` parameter. For
       Single-Incremental-Task (a.k.a. Task-Free) scenarios, this is usually
       a list of zeros. For Multi Task scenario, this is usually a list of
       ascending task labels (starting from 0).
   :param complete_test_set_only: If True, only the complete test set will
       be returned by the scenario. This means that the ``test_file_lists``
       parameter must be list with a single element (the complete test set).
       Alternatively, can be a plain string or :class:`Path` object.
       Defaults to False, which means that ``train_file_lists`` and
       ``test_file_lists`` must contain the same amount of filelists paths.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations). Defaults to None.
   :param train_target_transform: The transformation to apply to training
       patterns targets. Defaults to None.
   :param eval_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations). Defaults to None.
   :param eval_target_transform: The transformation to apply to test
       patterns targets. Defaults to None.

   :returns: A :class:`GenericCLScenario` instance.


.. function:: create_generic_scenario_from_paths(train_list_of_files: Sequence[Sequence[FileAndLabel]], test_list_of_files: Union[Sequence[FileAndLabel], Sequence[Sequence[FileAndLabel]]], task_labels: Sequence[int], complete_test_set_only: bool = False, train_transform=None, train_target_transform=None, eval_transform=None, eval_target_transform=None, dataset_type: AvalancheDatasetType = AvalancheDatasetType.UNDEFINED) -> GenericCLScenario

   This helper function is DEPRECATED in favor of
   `create_generic_benchmark_from_paths`.

   Creates a generic scenario given a sequence of lists of files. A separate
   dataset will be created for each list. Each of those training datasets
   will be considered a separate training experience.

   This is very similar to `create_generic_scenario_from_filelists`, with the
   main difference being that `create_generic_scenario_from_filelists`
   accepts, for each experience, a file list formatted in Caffe-style.
   On the contrary, this accepts a list of tuples where each tuple contains
   two elements: the full path to the pattern and its label.
   Optionally, the tuple may contain a third element describing the bounding
   box of the element to crop. This last bounding box may be useful when trying
   to extract the part of the image depicting the desired element.

   In its base form, this function accepts a list for the test datasets that
   must contain the same amount of elements of the training list.
   Those pairs of datasets are then used to create the "past", "cumulative"
   (a.k.a. growing) and "future" test sets. However, in certain Continual
   Learning scenarios only the concept of "complete" test set makes sense. In
   that case, the ``complete_test_set_only`` should be set to True (see the
   parameter description for more info).

   The label of each pattern doesn't have to be an int.

   :param train_list_of_files: A list of lists. Each list describes the paths
       and labels of patterns to include in that training experience, as
       tuples. Each tuple must contain two elements: the full path to the
       pattern and its class label. Optionally, the tuple may contain a
       third element describing the bounding box to use for cropping (top,
       left, height, width).
   :param test_list_of_files: A list of lists. Each list describes the paths
       and labels of patterns to include in that test experience, as tuples.
       Each tuple must contain two elements: the full path to the pattern
       and its class label. Optionally, the tuple may contain a third element
       describing the bounding box to use for cropping (top, left, height,
       width).
   :param task_labels: A list of task labels. Must contain the same amount of
       elements of the ``train_file_lists`` parameter. For
       Single-Incremental-Task (a.k.a. Task-Free) scenarios, this is usually
       a list of zeros. For Multi Task scenario, this is usually a list of
       ascending task labels (starting from 0).
   :param complete_test_set_only: If True, only the complete test set will
       be returned by the scenario. This means that the ``test_list_of_files``
       parameter must define a single experience (the complete test set).
       Defaults to False, which means that ``train_list_of_files`` and
       ``test_list_of_files`` must contain the same amount of paths.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations). Defaults to None.
   :param train_target_transform: The transformation to apply to training
       patterns targets. Defaults to None.
   :param eval_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations). Defaults to None.
   :param eval_target_transform: The transformation to apply to test
       patterns targets. Defaults to None.
   :param dataset_type: The type of the dataset. Defaults to UNDEFINED.

   :returns: A :class:`GenericCLScenario` instance.


.. function:: create_generic_scenario_from_tensor_lists(train_tensors: Sequence[Sequence[Any]], test_tensors: Sequence[Sequence[Any]], task_labels: Sequence[int], *, complete_test_set_only: bool = False, train_transform=None, train_target_transform=None, eval_transform=None, eval_target_transform=None, dataset_type: AvalancheDatasetType = None) -> GenericCLScenario

   This helper function is DEPRECATED in favor of
   `create_generic_benchmark_from_tensor_lists`.

   Creates a generic scenario given lists of Tensors. A separate dataset will
   be created from each Tensor tuple (x, y, z, ...) and each of those training
   datasets will be considered a separate training experience. Using this
   helper function is the lowest-level way to create a Continual Learning
   scenario. When possible, consider using higher level helpers.

   Experiences are defined by passing lists of tensors as the `train_tensors`
   and `test_tensors` parameter. Those parameters must be lists containing
   sub-lists of tensors, one for each experience. Each tensor defines the value
   of a feature ("x", "y", "z", ...) for all patterns of that experience.

   By default the second tensor of each experience will be used to fill the
   `targets` value (label of each pattern).

   In its base form, the test lists must contain the same amount of elements of
   the training lists. Those pairs of datasets are then used to create the
   "past", "cumulative" (a.k.a. growing) and "future" test sets.
   However, in certain Continual Learning scenarios only the concept of
   "complete" test set makes sense. In that case, the
   ``complete_test_set_only`` should be set to True (see the parameter
   description for more info).

   :param train_tensors: A list of lists. The first list must contain the
       tensors for the first training experience (one tensor per feature), the
       second list must contain the tensors for the second training experience,
       and so on.
   :param test_tensors: A list of lists. The first list must contain the
       tensors for the first test experience (one tensor per feature), the
       second list must contain the tensors for the second test experience,
       and so on. When using `complete_test_set_only`, this parameter
       must be a list containing a single sub-list for the single test
       experience.
   :param task_labels: A list of task labels. Must contain a task label for
       each experience. For Single-Incremental-Task (a.k.a. Task-Free)
       scenarios, this is usually a list of zeros. For Multi Task scenario,
       this is usually a list of ascending task labels (starting from 0).
   :param complete_test_set_only: If True, only the complete test set will
       be returned by the scenario. This means that ``test_tensors`` must
       define a single experience. Defaults to False, which means that
       ``train_tensors`` and ``test_tensors`` must define the same
       amount of experiences.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations). Defaults to None.
   :param train_target_transform: The transformation to apply to training
       patterns targets. Defaults to None.
   :param eval_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations). Defaults to None.
   :param eval_target_transform: The transformation to apply to test
       patterns targets. Defaults to None.
   :param dataset_type: The type of the dataset. Defaults to None, which
       means that the type will be obtained from the input datasets. If input
       datasets are not instances of :class:`AvalancheDataset`, the type
       UNDEFINED will be used.

   :returns: A :class:`GenericCLScenario` instance.


.. function:: create_generic_scenario_from_tensors(train_data_x: Sequence[Any], train_data_y: Sequence[Sequence[SupportsInt]], test_data_x: Union[Any, Sequence[Any]], test_data_y: Union[Any, Sequence[Sequence[SupportsInt]]], task_labels: Sequence[int], complete_test_set_only: bool = False, train_transform=None, train_target_transform=None, eval_transform=None, eval_target_transform=None, dataset_type: AvalancheDatasetType = AvalancheDatasetType.UNDEFINED) -> GenericCLScenario

   This helper function is DEPRECATED in favor of
   `create_generic_benchmark_from_tensor_lists`.

   Please consider using :func:`create_generic_scenario_from_tensor_lists`
   instead. When switching to the new function, please keep in mind that the
   format of the parameters is completely different!

   Creates a generic scenario given lists of Tensors and the respective task
   labels. A separate dataset will be created from each Tensor pair (x + y)
   and each of those training datasets will be considered a separate
   training experience. Contents of the datasets will not be changed, including
   the targets. Using this helper function is the lower level way to create a
   Continual Learning scenario. When possible, consider using higher level
   helpers.

   By default the second tensor of each experience will be used to fill the
   `targets` value (label of each pattern).

   In its base form, the test lists must contain the same amount of elements of
   the training lists. Those pairs of datasets are then used to create the
   "past", "cumulative" (a.k.a. growing) and "future" test sets.
   However, in certain Continual Learning scenarios only the concept of
   "complete" test set makes sense. In that case, the
   ``complete_test_set_only`` should be set to True (see the parameter
   description for more info).

   :param train_data_x: A list of Tensors (one per experience) containing the
       patterns of the training sets.
   :param train_data_y: A list of Tensors or int lists containing the
       labels of the patterns of the training sets. Must contain the same
       number of elements of ``train_datasets_x``.
   :param test_data_x: A Tensor or a list of Tensors (one per experience)
       containing the patterns of the test sets.
   :param test_data_y: A Tensor or a list of Tensors or int lists containing
       the labels of the patterns of the test sets. Must contain the same
       number of elements of ``test_datasets_x``.
   :param task_labels: A list of task labels. Must contain the same amount of
       elements of the ``train_datasets_x`` parameter. For
       Single-Incremental-Task (a.k.a. Task-Free) scenarios, this is usually
       a list of zeros. For Multi Task scenario, this is usually a list of
       ascending task labels (starting from 0).
   :param complete_test_set_only: If True, only the complete test set will
       be returned by the scenario. This means that ``test_data_x`` and
       ``test_data_y`` must define a single experience. Defaults to False,
       which means that ``train_data_*`` and ``test_data_*`` must define the
       same amount of experiences.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations). Defaults to None.
   :param train_target_transform: The transformation to apply to training
       patterns targets. Defaults to None.
   :param eval_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations). Defaults to None.
   :param eval_target_transform: The transformation to apply to test
       patterns targets. Defaults to None.
   :param dataset_type: The type of the dataset. Defaults to UNDEFINED.

   :returns: A :class:`GenericCLScenario` instance.


