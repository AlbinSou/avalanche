:mod:`avalanche.benchmarks.classic.ccifar10`
============================================

.. py:module:: avalanche.benchmarks.classic.ccifar10


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   avalanche.benchmarks.classic.ccifar10.SplitCIFAR10


.. function:: SplitCIFAR10(n_experiences: int, *, first_exp_with_half_classes: bool = False, return_task_id=False, seed: Optional[int] = None, fixed_class_order: Optional[Sequence[int]] = None, shuffle: bool = True, train_transform: Optional[Any] = _default_cifar10_train_transform, eval_transform: Optional[Any] = _default_cifar10_eval_transform, dataset_root: Union[str, Path] = None) -> NCScenario

   Creates a CL scenario using the CIFAR10 dataset.

   If the dataset is not present in the computer, this method will
   automatically download and store it.

   The returned scenario will return experiences containing all patterns of a
   subset of classes, which means that each class is only seen "once".
   This is one of the most common scenarios in the Continual Learning
   literature. Common names used in literature to describe this kind of
   scenario are "Class Incremental", "New Classes", etc. By default,
   an equal amount of classes will be assigned to each experience.

   This generator doesn't force a choice on the availability of task labels,
   a choice that is left to the user (see the `return_task_id` parameter for
   more info on task labels).

   The scenario instance returned by this method will have two fields,
   `train_stream` and `test_stream`, which can be iterated to obtain
   training and test :class:`Experience`. Each Experience contains the
   `dataset` and the associated task label.

   The scenario API is quite simple and is uniform across all scenario
   generators. It is recommended to check the tutorial of the "benchmark" API,
   which contains usage examples ranging from "basic" to "advanced".

   :param n_experiences: The number of experiences in the current scenario.
       The value of this parameter should be a divisor of 10 if
       `first_task_with_half_classes` is False, a divisor of 5 otherwise.
   :param first_exp_with_half_classes: A boolean value that indicates if a
       first pretraining step containing half of the classes should be used.
       If it's True, the first experience will use half of the classes (5 for
       cifar10). If this parameter is False, no pretraining step will be
       used and the dataset is simply split into a the number of experiences
       defined by the parameter n_experiences. Defaults to False.
   :param return_task_id: if True, a progressive task id is returned for every
       experience. If False, all experiences will have a task ID of 0.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param fixed_class_order: A list of class IDs used to define the class
       order. If None, value of ``seed`` will be used to define the class
       order. If not None, the ``seed`` parameter will be ignored.
       Defaults to None.
   :param shuffle: If true, the class order in the incremental experiences is
       randomly shuffled. Default to false.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param eval_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default eval transformation
       will be used.
   :param dataset_root: The root path of the dataset. Defaults to None, which
       means that the default location for 'cifar10' will be used.

   :returns: A properly initialized :class:`NCScenario` instance.


