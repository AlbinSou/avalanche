:mod:`avalanche.benchmarks.classic`
===================================

.. py:module:: avalanche.benchmarks.classic


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   ccifar10/index.rst
   ccifar100/index.rst
   ccub200/index.rst
   cfashion_mnist/index.rst
   cimagenet/index.rst
   cinaturalist/index.rst
   cmnist/index.rst
   comniglot/index.rst
   core50/index.rst
   ctiny_imagenet/index.rst
   openloris/index.rst
   stream51/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.benchmarks.classic.Stream51



Functions
~~~~~~~~~

.. autoapisummary::

   avalanche.benchmarks.classic.SplitCIFAR10
   avalanche.benchmarks.classic.SplitCIFAR100
   avalanche.benchmarks.classic.SplitCIFAR110
   avalanche.benchmarks.classic.SplitCUB200
   avalanche.benchmarks.classic.SplitFMNIST
   avalanche.benchmarks.classic.SplitImageNet
   avalanche.benchmarks.classic.SplitMNIST
   avalanche.benchmarks.classic.PermutedMNIST
   avalanche.benchmarks.classic.RotatedMNIST
   avalanche.benchmarks.classic.SplitOmniglot
   avalanche.benchmarks.classic.PermutedOmniglot
   avalanche.benchmarks.classic.RotatedOmniglot
   avalanche.benchmarks.classic.CORe50
   avalanche.benchmarks.classic.SplitTinyImageNet
   avalanche.benchmarks.classic.OpenLORIS


.. function:: SplitCIFAR10(n_experiences: int, first_exp_with_half_classes: bool = False, return_task_id=False, seed: Optional[int] = None, fixed_class_order: Optional[Sequence[int]] = None, train_transform=_default_cifar10_train_transform, eval_transform=_default_cifar10_eval_transform) -> NCScenario

   Creates a CL scenario using the CIFAR10 dataset.

   If the dataset is not present in the computer, this method will
   automatically download and store it.

   The returned scenario will return experiences containing all patterns of a
   subset of classes, which means that each class is only seen "once".
   This is one of the most common scenarios in the Continual Learning
   literature. Common names used in literature to describe this kind of
   scenario are "Class Incremental", "New Classes", etc. By default,
   an equal amount of classes will be assigned to each experience.

   This generator doesn't force a choice on the availability of task labels,
   a choice that is left to the user (see the `return_task_id` parameter for
   more info on task labels).

   The scenario instance returned by this method will have two fields,
   `train_stream` and `test_stream`, which can be iterated to obtain
   training and test :class:`Experience`. Each Experience contains the
   `dataset` and the associated task label.

   The scenario API is quite simple and is uniform across all scenario
   generators. It is recommended to check the tutorial of the "benchmark" API,
   which contains usage examples ranging from "basic" to "advanced".

   :param n_experiences: The number of experiences in the current scenario.
       The value of this parameter should be a divisor of 10 if
       `first_task_with_half_classes` is False, a divisor of 5 otherwise.
   :param first_exp_with_half_classes: A boolean value that indicates if a
       first pretraining step containing half of the classes should be used.
       If it's True, the first experience will use half of the classes (5 for
       cifar10). If this parameter is False, no pretraining step will be
       used and the dataset is simply split into a the number of experiences
       defined by the parameter n_experiences. Defaults to False.
   :param return_task_id: if True, a progressive task id is returned for every
       experience. If False, all experiences will have a task ID of 0.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param fixed_class_order: A list of class IDs used to define the class
       order. If None, value of ``seed`` will be used to define the class
       order. If not None, the ``seed`` parameter will be ignored.
       Defaults to None.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param eval_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default eval transformation
       will be used.

   :returns: A properly initialized :class:`NCScenario` instance.


.. function:: SplitCIFAR100(n_experiences: int, first_exp_with_half_classes: bool = False, return_task_id=False, seed: Optional[int] = None, fixed_class_order: Optional[Sequence[int]] = None, train_transform=_default_cifar100_train_transform, eval_transform=_default_cifar100_eval_transform)

   Creates a CL scenario using the CIFAR100 dataset.

   If the dataset is not present in the computer, this method will
   automatically download and store it.

   The returned scenario will return experiences containing all patterns of a
   subset of classes, which means that each class is only seen "once".
   This is one of the most common scenarios in the Continual Learning
   literature. Common names used in literature to describe this kind of
   scenario are "Class Incremental", "New Classes", etc. By default,
   an equal amount of classes will be assigned to each experience.

   This generator doesn't force a choice on the availability of task labels,
   a choice that is left to the user (see the `return_task_id` parameter for
   more info on task labels).

   The scenario instance returned by this method will have two fields,
   `train_stream` and `test_stream`, which can be iterated to obtain
   training and test :class:`Experience`. Each Experience contains the
   `dataset` and the associated task label.

   The scenario API is quite simple and is uniform across all scenario
   generators. It is recommended to check the tutorial of the "benchmark" API,
   which contains usage examples ranging from "basic" to "advanced".

   :param n_experiences: The number of incremental experiences in the current
       scenario. The value of this parameter should be a divisor of 100 if
       first_task_with_half_classes is False, a divisor of 50 otherwise.
   :param first_exp_with_half_classes: A boolean value that indicates if a
       first pretraining batch containing half of the classes should be used.
       If it's True, a pretraining experience with half of the classes (50 for
       cifar100) is used. If this parameter is False no pretraining task
       will be used, and the dataset is simply split into a the number of
       experiences defined by the parameter n_experiences. Default to False.
   :param return_task_id: if True, a progressive task id is returned for every
       experience. If False, all experiences will have a task ID of 0.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param fixed_class_order: A list of class IDs used to define the class
       order. If None, value of ``seed`` will be used to define the class
       order. If non-None, ``seed`` parameter will be ignored.
       Defaults to None.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param eval_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A properly initialized :class:`NCScenario` instance.


.. function:: SplitCIFAR110(n_experiences: int, seed: Optional[int] = None, fixed_class_order: Optional[Sequence[int]] = None, train_transform=_default_cifar100_train_transform, eval_transform=_default_cifar100_eval_transform) -> NCScenario

   Creates a CL scenario using both the CIFAR100 and CIFAR10 datasets.

   If the datasets are not present in the computer, this method will
   automatically download and store them in the data folder.

   The CIFAR10 dataset is used to create the first experience, while the
   remaining `n_experiences-1` experiences will be created from CIFAR100.

   The returned scenario will return experiences containing all patterns of a
   subset of classes, which means that each class is only seen "once".
   This is one of the most common scenarios in the Continual Learning
   literature. Common names used in literature to describe this kind of
   scenario are "Class Incremental", "New Classes", etc. By default,
   an equal amount of classes will be assigned to each experience.

   This generator will apply a task label "0" to all experiences.

   The scenario instance returned by this method will have two fields,
   `train_stream` and `test_stream`, which can be iterated to obtain
   training and test :class:`Experience`. Each Experience contains the
   `dataset` and the associated task label (always "0" for this specific
   benchmark).

   The scenario API is quite simple and is uniform across all scenario
   generators. It is recommended to check the tutorial of the "benchmark" API,
   which contains usage examples ranging from "basic" to "advanced".

   :param n_experiences: The number of experiences for the entire scenario.
       The first experience will contain the entire CIFAR10 dataset, while the
       other n-1 experiences will be obtained from CIFAR100.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param fixed_class_order: A list of class IDs used to define the class
       order ONLY for the incremental part, which is based on cifar100. The
       classes must be in range 0-99.
       If None, value of ``seed`` will be used to define the class order for
       the incremental batches on cifar100. If non-None, ``seed`` parameter
       will be ignored. Defaults to None.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param eval_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A properly initialized :class:`NCScenario` instance.


.. function:: SplitCUB200(root=expanduser('~') + '/.avalanche/data/CUB_200_2011/', n_experiences=11, classes_first_batch=100, return_task_id=False, seed=0, fixed_class_order=None, shuffle=False, train_transform=_default_train_transform, eval_transform=_default_eval_transform)

   Creates a CL scenario using the Cub-200 dataset.

   If the dataset is not present in the computer, **this method will NOT be
   able automatically download** and store it.

   The returned scenario will return experiences containing all patterns of a
   subset of classes, which means that each class is only seen "once".
   This is one of the most common scenarios in the Continual Learning
   literature. Common names used in literature to describe this kind of
   scenario are "Class Incremental", "New Classes", etc. By default,
   an equal amount of classes will be assigned to each experience.

   This generator doesn't force a choice on the availability of task labels,
   a choice that is left to the user (see the `return_task_id` parameter for
   more info on task labels).

   The scenario instance returned by this method will have two fields,
   `train_stream` and `test_stream`, which can be iterated to obtain
   training and test :class:`Experience`. Each Experience contains the
   `dataset` and the associated task label.

   The scenario API is quite simple and is uniform across all scenario
   generators. It is recommended to check the tutorial of the "benchmark" API,
   which contains usage examples ranging from "basic" to "advanced".

   :param root: Base path where Cub-200 data is stored.
   :param n_experiences: The number of experiences in the current scenario.
       Defaults to 11.
   :param classes_first_batch: Number of classes in the first batch.
       Usually this is set to 500. Defaults to 100.
   :param return_task_id: if True, a progressive task id is returned for every
       experience. If False, all experiences will have a task ID of 0.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param fixed_class_order: A list of class IDs used to define the class
       order. If None, value of ``seed`` will be used to define the class
       order. If non-None, ``seed`` parameter will be ignored.
       Defaults to None.
   :param shuffle: If true, the class order in the incremental experiences is
       randomly shuffled. Default to false.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param eval_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A properly initialized :class:`NCScenario` instance.


.. function:: SplitFMNIST(n_experiences: int, first_batch_with_half_classes: bool = False, return_task_id=False, seed: Optional[int] = None, fixed_class_order: Optional[Sequence[int]] = None, train_transform=_default_fmnist_train_transform, eval_transform=_default_fmnist_eval_transform)

   Creates a CL scenario using the Fashion MNIST dataset.

   If the dataset is not present in the computer, this method will
   automatically download and store it.

   The returned scenario will return experiences containing all patterns of a
   subset of classes, which means that each class is only seen "once".
   This is one of the most common scenarios in the Continual Learning
   literature. Common names used in literature to describe this kind of
   scenario are "Class Incremental", "New Classes", etc. By default,
   an equal amount of classes will be assigned to each experience.

   This generator doesn't force a choice on the availability of task labels,
   a choice that is left to the user (see the `return_task_id` parameter for
   more info on task labels).

   The scenario instance returned by this method will have two fields,
   `train_stream` and `test_stream`, which can be iterated to obtain
   training and test :class:`Experience`. Each Experience contains the
   `dataset` and the associated task label.

   The scenario API is quite simple and is uniform across all scenario
   generators. It is recommended to check the tutorial of the "benchmark" API,
   which contains usage examples ranging from "basic" to "advanced".

   :param n_experiences: The number of experiences in the current
       scenario. If the first experience is a "pretraining" step and it
       contains half of the classes. The value of this parameter should be a
       divisor of 10 if first_task_with_half_classes if false, a divisor of 5
       otherwise.
   :param first_batch_with_half_classes: A boolean value that indicates if a
       first pretraining batch containing half of the classes should be used.
       If it's True, a pretraining batch with half of the classes (5 for
       cifar100) is used. If this parameter is False no pretraining task
       will be used, and the dataset is simply split into
       a the number of experiences defined by the parameter n_experiences.
       Default to False.
   :param return_task_id: if True, a progressive task id is returned for every
       experience. If False, all experiences will have a task ID of 0.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param fixed_class_order: A list of class IDs used to define the class
       order. If None, value of ``seed`` will be used to define the class
       order. If non-None, ``seed`` parameter will be ignored.
       Defaults to None.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param eval_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A properly initialized :class:`NCScenario` instance.


.. function:: SplitImageNet(root, n_experiences=10, per_exp_classes=None, return_task_id=False, seed=0, fixed_class_order=None, train_transform=_default_train_transform, eval_transform=_default_eval_transform)

   Creates a CL scenario using the ImageNet dataset.

   If the dataset is not present in the computer, **this method will NOT be
   able automatically download** and store it.

   The returned scenario will return experiences containing all patterns of a
   subset of classes, which means that each class is only seen "once".
   This is one of the most common scenarios in the Continual Learning
   literature. Common names used in literature to describe this kind of
   scenario are "Class Incremental", "New Classes", etc. By default,
   an equal amount of classes will be assigned to each experience.

   This generator doesn't force a choice on the availability of task labels,
   a choice that is left to the user (see the `return_task_id` parameter for
   more info on task labels).

   The scenario instance returned by this method will have two fields,
   `train_stream` and `test_stream`, which can be iterated to obtain
   training and test :class:`Experience`. Each Experience contains the
   `dataset` and the associated task label.

   The scenario API is quite simple and is uniform across all scenario
   generators. It is recommended to check the tutorial of the "benchmark" API,
   which contains usage examples ranging from "basic" to "advanced".

   :param root: Base path where Imagenet data is stored.
   :param n_experiences: The number of experiences in the current scenario.
   :param per_exp_classes: Is not None, a dictionary whose keys are
       (0-indexed) experience IDs and their values are the number of classes
       to include in the respective experiences. The dictionary doesn't
       have to contain a key for each experience! All the remaining exps
       will contain an equal amount of the remaining classes. The
       remaining number of classes must be divisible without remainder
       by the remaining number of experiences. For instance,
       if you want to include 50 classes in the first experience
       while equally distributing remaining classes across remaining
       experiences, just pass the "{0: 50}" dictionary as the
       per_experience_classes parameter. Defaults to None.
   :param return_task_id: if True, a progressive task id is returned for every
       experience. If False, all experiences will have a task ID of 0.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param fixed_class_order: A list of class IDs used to define the class
       order. If None, value of ``seed`` will be used to define the class
       order. If non-None, ``seed`` parameter will be ignored.
       Defaults to None.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param eval_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A properly initialized :class:`NCScenario` instance.


.. function:: SplitMNIST(n_experiences: int, return_task_id=False, seed: Optional[int] = None, fixed_class_order: Optional[Sequence[int]] = None, train_transform=_default_mnist_train_transform, eval_transform=_default_mnist_eval_transform)

   Creates a CL scenario using the MNIST dataset.

   If the dataset is not present in the computer, this method will
   automatically download and store it.

   The returned scenario will return experiences containing all patterns of a
   subset of classes, which means that each class is only seen "once".
   This is one of the most common scenarios in the Continual Learning
   literature. Common names used in literature to describe this kind of
   scenario are "Class Incremental", "New Classes", etc. By default,
   an equal amount of classes will be assigned to each experience.

   This generator doesn't force a choice on the availability of task labels,
   a choice that is left to the user (see the `return_task_id` parameter for
   more info on task labels).

   The scenario instance returned by this method will have two fields,
   `train_stream` and `test_stream`, which can be iterated to obtain
   training and test :class:`Experience`. Each Experience contains the
   `dataset` and the associated task label.

   The scenario API is quite simple and is uniform across all scenario
   generators. It is recommended to check the tutorial of the "benchmark" API,
   which contains usage examples ranging from "basic" to "advanced".

   :param n_experiences: The number of incremental experiences in the current
       scenario.
       The value of this parameter should be a divisor of 10.
   :param return_task_id: if True, a progressive task id is returned for every
       experience. If False, all experiences will have a task ID of 0.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param fixed_class_order: A list of class IDs used to define the class
       order. If None, value of ``seed`` will be used to define the class
       order. If non-None, ``seed`` parameter will be ignored.
       Defaults to None.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param eval_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A properly initialized :class:`NCScenario` instance.


.. function:: PermutedMNIST(n_experiences: int, seed: Optional[int] = None, train_transform: Any = _default_mnist_train_transform, eval_transform: Any = _default_mnist_eval_transform) -> NCScenario

   Creates a Permuted MNIST scenario.

   If the dataset is not present in the computer, this method will
   automatically download and store it.

   Random pixel permutations are used to permute the MNIST images in
   ``n_experiences`` different manners. This means that each experience is
   composed of all the original 10 MNIST classes, but the pixel in the images
   are permuted in a different way.

   The scenario instance returned by this method will have two fields,
   `train_stream` and `test_stream`, which can be iterated to obtain
   training and test :class:`Experience`. Each Experience contains the
   `dataset` and the associated task label.

   A progressive task label, starting from "0", is applied to each experience.

   The scenario API is quite simple and is uniform across all scenario
   generators. It is recommended to check the tutorial of the "benchmark" API,
   which contains usage examples ranging from "basic" to "advanced".

   :param n_experiences: The number of experiences (tasks) in the current
       scenario. It indicates how many different permutations of the MNIST
       dataset have to be created.
       The value of this parameter should be a divisor of 10.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param train_transform: The transformation to apply to the training data
       before the random permutation, e.g. a random crop, a normalization or a
       concatenation of different transformations (see torchvision.transform
       documentation for a comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param eval_transform: The transformation to apply to the test data
       before the random permutation, e.g. a random crop, a normalization or a
       concatenation of different transformations (see torchvision.transform
       documentation for a comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A properly initialized :class:`NCScenario` instance.


.. function:: RotatedMNIST(n_experiences: int, seed: Optional[int] = None, rotations_list: Optional[Sequence[int]] = None, train_transform=_default_mnist_train_transform, eval_transform=_default_mnist_eval_transform) -> NCScenario

   Creates a Rotated MNIST scenario.

   If the dataset is not present in the computer, this method will
   automatically download and store it.

   Random angles are used to rotate the MNIST images in ``n_experiences``
   different manners. This means that each experience is composed of all the
   original 10 MNIST classes, but each image is rotated in a different way.

   The scenario instance returned by this method will have two fields,
   `train_stream` and `test_stream`, which can be iterated to obtain
   training and test :class:`Experience`. Each Experience contains the
   `dataset` and the associated task label.

   A progressive task label, starting from "0", is applied to each experience.

   The scenario API is quite simple and is uniform across all scenario
   generators. It is recommended to check the tutorial of the "benchmark" API,
   which contains usage examples ranging from "basic" to "advanced".

   :param n_experiences: The number of experiences (tasks) in the current
       scenario. It indicates how many different rotations of the MNIST
       dataset have to be created.
       The value of this parameter should be a divisor of 10.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param rotations_list: A list of rotations values in degrees (from -180 to
       180) used to define the rotations. The rotation specified in position
       0 of the list will be applied to the task 0, the rotation specified in
       position 1 will be applied to task 1 and so on.
       If None, value of ``seed`` will be used to define the rotations.
       If non-None, ``seed`` parameter will be ignored.
       Defaults to None.
   :param train_transform: The transformation to apply to the training data
       after the random rotation, e.g. a random crop, a normalization or a
       concatenation of different transformations (see torchvision.transform
       documentation for a comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param eval_transform: The transformation to apply to the test data
       after the random rotation, e.g. a random crop, a normalization or a
       concatenation of different transformations (see torchvision.transform
       documentation for a comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A properly initialized :class:`NCScenario` instance.


.. function:: SplitOmniglot(n_experiences: int, return_task_id=False, seed: Optional[int] = None, fixed_class_order: Optional[Sequence[int]] = None, train_transform=_default_omniglot_train_transform, eval_transform=_default_omniglot_eval_transform)

   Creates a CL scenario using the OMNIGLOT dataset.

   If the dataset is not present in the computer, this method will
   automatically download and store it.

   The returned scenario will return experiences containing all patterns of a
   subset of classes, which means that each class is only seen "once".
   This is one of the most common scenarios in the Continual Learning
   literature. Common names used in literature to describe this kind of
   scenario are "Class Incremental", "New Classes", etc.

   By default, an equal amount of classes will be assigned to each experience.
   OMNIGLOT consists of 1623 classes, which means that the number of
   experiences can be 1, 3, 541, 1623.

   This generator doesn't force a choice on the availability of task labels,
   a choice that is left to the user (see the `return_task_id` parameter for
   more info on task labels).

   The scenario instance returned by this method will have two fields,
   `train_stream` and `test_stream`, which can be iterated to obtain
   training and test :class:`Experience`. Each Experience contains the
   `dataset` and the associated task label.

   The scenario API is quite simple and is uniform across all scenario
   generators. It is recommended to check the tutorial of the "benchmark" API,
   which contains usage examples ranging from "basic" to "advanced".

   :param n_experiences: The number of incremental experiences in the current
       scenario. The value of this parameter should be a divisor of 10.
   :param return_task_id: if True, a progressive task id is returned for every
       experience. If False, all experiences will have a task ID of 0.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param fixed_class_order: A list of class IDs used to define the class
       order. If None, value of ``seed`` will be used to define the class
       order. If non-None, ``seed`` parameter will be ignored.
       Defaults to None.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param eval_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A properly initialized :class:`NCScenario` instance.


.. function:: PermutedOmniglot(n_experiences: int, seed: Optional[int] = None, train_transform: Any = _default_omniglot_train_transform, eval_transform: Any = _default_omniglot_eval_transform) -> NCScenario

   Creates a Permuted Omniglot scenario.

   If the dataset is not present in the computer, this method will
   automatically download and store it.

   Random pixel permutations are used to permute the Omniglot images in
   ``n_experiences`` different manners. This means that each experience is
   composed of all the original 1623 Omniglot classes, but the pixel in the
   images are permuted in a different way.

   The scenario instance returned by this method will have two fields,
   `train_stream` and `test_stream`, which can be iterated to obtain
   training and test :class:`Experience`. Each Experience contains the
   `dataset` and the associated task label.

   A progressive task label, starting from "0", is applied to each experience.

   The scenario API is quite simple and is uniform across all scenario
   generators. It is recommended to check the tutorial of the "benchmark" API,
   which contains usage examples ranging from "basic" to "advanced".

   :param n_experiences: The number of experiences (tasks) in the current
       scenario. It indicates how many different permutations of the Omniglot
       dataset have to be created.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param train_transform: The transformation to apply to the training data
       before the random permutation, e.g. a random crop, a normalization or a
       concatenation of different transformations (see torchvision.transform
       documentation for a comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param eval_transform: The transformation to apply to the test data
       before the random permutation, e.g. a random crop, a normalization or a
       concatenation of different transformations (see torchvision.transform
       documentation for a comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A properly initialized :class:`NCScenario` instance.


.. function:: RotatedOmniglot(n_experiences: int, seed: Optional[int] = None, rotations_list: Optional[Sequence[int]] = None, train_transform=_default_omniglot_train_transform, eval_transform=_default_omniglot_eval_transform) -> NCScenario

   Creates a Rotated Omniglot scenario.

   If the dataset is not present in the computer, this method will
   automatically download and store it.

   Random angles are used to rotate the Omniglot images in ``n_experiences``
   different manners. This means that each experience is
   composed of all the original 1623 Omniglot classes, but each image is
   rotated in a different way.

   The scenario instance returned by this method will have two fields,
   `train_stream` and `test_stream`, which can be iterated to obtain
   training and test :class:`Experience`. Each Experience contains the
   `dataset` and the associated task label.

   A progressive task label, starting from "0", is applied to each experience.

   The scenario API is quite simple and is uniform across all scenario
   generators. It is recommended to check the tutorial of the "benchmark" API,
   which contains usage examples ranging from "basic" to "advanced".

   :param n_experiences: The number of experiences (tasks) in the current
       scenario. It indicates how many different rotations of the Omniglot
       dataset have to be created.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param rotations_list: A list of rotations values in degrees (from -180 to
       180) used to define the rotations. The rotation specified in position
       0 of the list will be applied to the task 0, the rotation specified in
       position 1 will be applied to task 1 and so on.
       If None, value of ``seed`` will be used to define the rotations.
       If non-None, ``seed`` parameter will be ignored.
       Defaults to None.
   :param train_transform: The transformation to apply to the training data
       after the random rotation, e.g. a random crop, a normalization or a
       concatenation of different transformations (see torchvision.transform
       documentation for a comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param eval_transform: The transformation to apply to the test data
       after the random rotation, e.g. a random crop, a normalization or a
       concatenation of different transformations (see torchvision.transform
       documentation for a comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A properly initialized :class:`NCScenario` instance.


.. function:: CORe50(root: Union[str, Path] = get_default_dataset_location('core50'), scenario: str = 'nicv2_391', run: int = 0, object_lvl: bool = True, mini: bool = False, train_transform=None, eval_transform=None)

   Creates a CL scenario for CORe50.

   If the dataset is not present in the computer, this method will
   automatically download and store it.

   This generator can be used to obtain the NI, NC, NIC and NICv2-* scenarios.

   The scenario instance returned by this method will have two fields,
   `train_stream` and `test_stream`, which can be iterated to obtain
   training and test :class:`Experience`. Each Experience contains the
   `dataset` and the associated task label.

   The task label "0" will be assigned to each experience.

   The scenario API is quite simple and is uniform across all scenario
   generators. It is recommended to check the tutorial of the "benchmark" API,
   which contains usage examples ranging from "basic" to "advanced".

   :param root: Absolute path indicating where to store the dataset and related
       metadata. By default they will be stored in
       "~/.avalanche/datasets/core50/data/".
   :param scenario: CORe50 main scenario. It can be chosen between 'ni', 'nc',
       'nic', 'nicv2_79', 'nicv2_196' or 'nicv2_391.'
   :param run: number of run for the scenario. Each run defines a different
       ordering. Must be a number between 0 and 9.
   :param object_lvl: True for a 50-way classification at the object level.
       False if you want to use the categories as classes. Default to True.
   :param mini: True for processing reduced 32x32 images instead of the
       original 128x128. Default to False.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations). Defaults to None.
   :param eval_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations). Defaults to None.

   :returns: a properly initialized :class:`GenericCLScenario` instance.


.. function:: SplitTinyImageNet(n_experiences=10, return_task_id=False, seed=0, fixed_class_order=None, train_transform=_default_train_transform, eval_transform=_default_eval_transform)

   Creates a CL scenario using the Tiny ImageNet dataset.

   If the dataset is not present in the computer, this method will
   automatically download and store it.

   The returned scenario will return experiences containing all patterns of a
   subset of classes, which means that each class is only seen "once".
   This is one of the most common scenarios in the Continual Learning
   literature. Common names used in literature to describe this kind of
   scenario are "Class Incremental", "New Classes", etc. By default,
   an equal amount of classes will be assigned to each experience.

   This generator doesn't force a choice on the availability of task labels,
   a choice that is left to the user (see the `return_task_id` parameter for
   more info on task labels).

   The scenario instance returned by this method will have two fields,
   `train_stream` and `test_stream`, which can be iterated to obtain
   training and test :class:`Experience`. Each Experience contains the
   `dataset` and the associated task label.

   The scenario API is quite simple and is uniform across all scenario
   generators. It is recommended to check the tutorial of the "benchmark" API,
   which contains usage examples ranging from "basic" to "advanced".

   :param n_experiences: The number of experiences in the current scenario.
   :param return_task_id: if True, a progressive task id is returned for every
       experience. If False, all experiences will have a task ID of 0.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param fixed_class_order: A list of class IDs used to define the class
       order. If None, value of ``seed`` will be used to define the class
       order. If non-None, ``seed`` parameter will be ignored.
       Defaults to None.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param eval_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A properly initialized :class:`NCScenario` instance.


.. function:: OpenLORIS(root=expanduser('~') + '/.avalanche/data/openloris/', factor='clutter', train_transform=None, eval_transform=None)

   Creates a CL scenario for OpenLORIS.

   If the dataset is not present in the computer, **this method will NOT be
   able automatically download** and store it.

   This generator can be used to obtain scenarios based on different "factors".
   Valid factors include 'clutter', 'illumination', 'occlusion', 'pixel', or
   'mixture-iros'.

   The scenario instance returned by this method will have two fields,
   `train_stream` and `test_stream`, which can be iterated to obtain
   training and test :class:`Experience`. Each Experience contains the
   `dataset` and the associated task label.

   The task label "0" will be assigned to each experience.

   The scenario API is quite simple and is uniform across all scenario
   generators. It is recommended to check the tutorial of the "benchmark" API,
   which contains usage examples ranging from "basic" to "advanced".

   :param root: Base path where OpenLORIS data is stored.
   :param factor: OpenLORIS main factors, indicating different environmental
       variations. It can be chosen between 'clutter', 'illumination',
       'occlusion', 'pixel', or 'mixture-iros'. The first three factors are
       included in the ICRA 2020 paper and the last factor (mixture-iros) is
       the benchmark setting for IROS 2019 Lifelong robotic vision competition.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations). Defaults to None.
   :param eval_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations). Defaults to None.

   :returns: a properly initialized :class:`GenericCLScenario` instance.


.. py:class:: Stream51(root=get_default_dataset_location('stream51'), *, train=True, transform=None, target_transform=None, loader=default_loader, download=True)

   Bases: :class:`avalanche.benchmarks.datasets.DownloadableDataset`

   Stream-51 Pytorch Dataset 

   Creates an instance of a downloadable dataset.

   Consider looking at the class documentation for the precise details on
   how to extend this class.

   Beware that calling this constructor only fills the `root` field. The
   download and metadata loading procedures are triggered only by
   calling `_load_dataset`.

   :param root: The root path where the dataset will be downloaded.
       Consider passing a path obtained by calling
       `get_default_dataset_location` with the name of the dataset.
   :param download: If True, the dataset will be downloaded if needed.
       If False and the dataset can't be loaded from the provided root
       path, an error will be raised when calling the `_load_dataset`
       method. Defaults to True.
   :param verbose: If True, some info about the download process will be
       printed. Defaults to False.

   .. method:: make_dataset(data_list, ordering='class_instance', seed=666)
      :staticmethod:

      data_list
      for train: [class_id, clip_num, video_num, frame_num, bbox, file_loc]
      for test: [class_id, bbox, file_loc]


   .. method:: __getitem__(self, index)

      Args:
          index (int): Index

      Returns:
          tuple: (sample, target) where target is class_index of the target
          class.


   .. method:: __len__(self)


   .. method:: __repr__(self)

      Return repr(self).



