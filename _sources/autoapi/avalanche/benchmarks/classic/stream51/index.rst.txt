:mod:`avalanche.benchmarks.classic.stream51`
============================================

.. py:module:: avalanche.benchmarks.classic.stream51


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.benchmarks.classic.stream51.Stream51



.. py:class:: Stream51(root=get_default_dataset_location('stream51'), *, train=True, transform=None, target_transform=None, loader=default_loader, download=True)

   Bases: :class:`avalanche.benchmarks.datasets.DownloadableDataset`

   Stream-51 Pytorch Dataset 

   Creates an instance of a downloadable dataset.

   Consider looking at the class documentation for the precise details on
   how to extend this class.

   Beware that calling this constructor only fills the `root` field. The
   download and metadata loading procedures are triggered only by
   calling `_load_dataset`.

   :param root: The root path where the dataset will be downloaded.
       Consider passing a path obtained by calling
       `get_default_dataset_location` with the name of the dataset.
   :param download: If True, the dataset will be downloaded if needed.
       If False and the dataset can't be loaded from the provided root
       path, an error will be raised when calling the `_load_dataset`
       method. Defaults to True.
   :param verbose: If True, some info about the download process will be
       printed. Defaults to False.

   .. method:: make_dataset(data_list, ordering='class_instance', seed=666)
      :staticmethod:

      data_list
      for train: [class_id, clip_num, video_num, frame_num, bbox, file_loc]
      for test: [class_id, bbox, file_loc]


   .. method:: __getitem__(self, index)

      Args:
          index (int): Index

      Returns:
          tuple: (sample, target) where target is class_index of the target
          class.


   .. method:: __len__(self)


   .. method:: __repr__(self)

      Return repr(self).



