:mod:`avalanche.benchmarks.classic.core50`
==========================================

.. py:module:: avalanche.benchmarks.classic.core50

.. autoapi-nested-parse::

   This module contains the high-level CORe50 scenario generator. It
   basically returns a iterable scenario object ``GenericCLScenario`` given a
   number of configuration parameters.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   avalanche.benchmarks.classic.core50.CORe50


.. function:: CORe50(root: Union[str, Path] = get_default_dataset_location('core50'), scenario: str = 'nicv2_391', run: int = 0, object_lvl: bool = True, mini: bool = False, train_transform=None, eval_transform=None)

   Creates a CL scenario for CORe50.

   If the dataset is not present in the computer, this method will
   automatically download and store it.

   This generator can be used to obtain the NI, NC, NIC and NICv2-* scenarios.

   The scenario instance returned by this method will have two fields,
   `train_stream` and `test_stream`, which can be iterated to obtain
   training and test :class:`Experience`. Each Experience contains the
   `dataset` and the associated task label.

   The task label "0" will be assigned to each experience.

   The scenario API is quite simple and is uniform across all scenario
   generators. It is recommended to check the tutorial of the "benchmark" API,
   which contains usage examples ranging from "basic" to "advanced".

   :param root: Absolute path indicating where to store the dataset and related
       metadata. By default they will be stored in
       "~/.avalanche/datasets/core50/data/".
   :param scenario: CORe50 main scenario. It can be chosen between 'ni', 'nc',
       'nic', 'nicv2_79', 'nicv2_196' or 'nicv2_391.'
   :param run: number of run for the scenario. Each run defines a different
       ordering. Must be a number between 0 and 9.
   :param object_lvl: True for a 50-way classification at the object level.
       False if you want to use the categories as classes. Default to True.
   :param mini: True for processing reduced 32x32 images instead of the
       original 128x128. Default to False.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations). Defaults to None.
   :param eval_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations). Defaults to None.

   :returns: a properly initialized :class:`GenericCLScenario` instance.


