:mod:`avalanche.benchmarks.classic.cmnist`
==========================================

.. py:module:: avalanche.benchmarks.classic.cmnist


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   avalanche.benchmarks.classic.cmnist.SplitMNIST
   avalanche.benchmarks.classic.cmnist.PermutedMNIST
   avalanche.benchmarks.classic.cmnist.RotatedMNIST


.. function:: SplitMNIST(n_experiences: int, *, return_task_id=False, seed: Optional[int] = None, fixed_class_order: Optional[Sequence[int]] = None, shuffle: bool = True, train_transform: Optional[Any] = _default_mnist_train_transform, eval_transform: Optional[Any] = _default_mnist_eval_transform, dataset_root: Union[str, Path] = None)

   Creates a CL scenario using the MNIST dataset.

   If the dataset is not present in the computer, this method will
   automatically download and store it.

   The returned scenario will return experiences containing all patterns of a
   subset of classes, which means that each class is only seen "once".
   This is one of the most common scenarios in the Continual Learning
   literature. Common names used in literature to describe this kind of
   scenario are "Class Incremental", "New Classes", etc. By default,
   an equal amount of classes will be assigned to each experience.

   This generator doesn't force a choice on the availability of task labels,
   a choice that is left to the user (see the `return_task_id` parameter for
   more info on task labels).

   The scenario instance returned by this method will have two fields,
   `train_stream` and `test_stream`, which can be iterated to obtain
   training and test :class:`Experience`. Each Experience contains the
   `dataset` and the associated task label.

   The scenario API is quite simple and is uniform across all scenario
   generators. It is recommended to check the tutorial of the "benchmark" API,
   which contains usage examples ranging from "basic" to "advanced".

   :param n_experiences: The number of incremental experiences in the current
       scenario.
       The value of this parameter should be a divisor of 10.
   :param return_task_id: if True, a progressive task id is returned for every
       experience. If False, all experiences will have a task ID of 0.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param fixed_class_order: A list of class IDs used to define the class
       order. If None, value of ``seed`` will be used to define the class
       order. If non-None, ``seed`` parameter will be ignored.
       Defaults to None.
   :param shuffle: If true, the class order in the incremental experiences is
       randomly shuffled. Default to false.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param eval_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.
   :param dataset_root: The root path of the dataset. Defaults to None, which
       means that the default location for 'mnist' will be used.

   :returns: A properly initialized :class:`NCScenario` instance.


.. function:: PermutedMNIST(n_experiences: int, *, seed: Optional[int] = None, train_transform: Optional[Any] = _default_mnist_train_transform, eval_transform: Optional[Any] = _default_mnist_eval_transform, dataset_root: Union[str, Path] = None) -> NCScenario

   Creates a Permuted MNIST scenario.

   If the dataset is not present in the computer, this method will
   automatically download and store it.

   Random pixel permutations are used to permute the MNIST images in
   ``n_experiences`` different manners. This means that each experience is
   composed of all the original 10 MNIST classes, but the pixel in the images
   are permuted in a different way.

   The scenario instance returned by this method will have two fields,
   `train_stream` and `test_stream`, which can be iterated to obtain
   training and test :class:`Experience`. Each Experience contains the
   `dataset` and the associated task label.

   A progressive task label, starting from "0", is applied to each experience.

   The scenario API is quite simple and is uniform across all scenario
   generators. It is recommended to check the tutorial of the "benchmark" API,
   which contains usage examples ranging from "basic" to "advanced".

   :param n_experiences: The number of experiences (tasks) in the current
       scenario. It indicates how many different permutations of the MNIST
       dataset have to be created.
       The value of this parameter should be a divisor of 10.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param train_transform: The transformation to apply to the training data
       before the random permutation, e.g. a random crop, a normalization or a
       concatenation of different transformations (see torchvision.transform
       documentation for a comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param eval_transform: The transformation to apply to the test data
       before the random permutation, e.g. a random crop, a normalization or a
       concatenation of different transformations (see torchvision.transform
       documentation for a comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.
   :param dataset_root: The root path of the dataset. Defaults to None, which
       means that the default location for 'mnist' will be used.

   :returns: A properly initialized :class:`NCScenario` instance.


.. function:: RotatedMNIST(n_experiences: int, *, seed: Optional[int] = None, rotations_list: Optional[Sequence[int]] = None, train_transform: Optional[Any] = _default_mnist_train_transform, eval_transform: Optional[Any] = _default_mnist_eval_transform, dataset_root: Union[str, Path] = None) -> NCScenario

   Creates a Rotated MNIST scenario.

   If the dataset is not present in the computer, this method will
   automatically download and store it.

   Random angles are used to rotate the MNIST images in ``n_experiences``
   different manners. This means that each experience is composed of all the
   original 10 MNIST classes, but each image is rotated in a different way.

   The scenario instance returned by this method will have two fields,
   `train_stream` and `test_stream`, which can be iterated to obtain
   training and test :class:`Experience`. Each Experience contains the
   `dataset` and the associated task label.

   A progressive task label, starting from "0", is applied to each experience.

   The scenario API is quite simple and is uniform across all scenario
   generators. It is recommended to check the tutorial of the "benchmark" API,
   which contains usage examples ranging from "basic" to "advanced".

   :param n_experiences: The number of experiences (tasks) in the current
       scenario. It indicates how many different rotations of the MNIST
       dataset have to be created.
       The value of this parameter should be a divisor of 10.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param rotations_list: A list of rotations values in degrees (from -180 to
       180) used to define the rotations. The rotation specified in position
       0 of the list will be applied to the task 0, the rotation specified in
       position 1 will be applied to task 1 and so on.
       If None, value of ``seed`` will be used to define the rotations.
       If non-None, ``seed`` parameter will be ignored.
       Defaults to None.
   :param train_transform: The transformation to apply to the training data
       after the random rotation, e.g. a random crop, a normalization or a
       concatenation of different transformations (see torchvision.transform
       documentation for a comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param eval_transform: The transformation to apply to the test data
       after the random rotation, e.g. a random crop, a normalization or a
       concatenation of different transformations (see torchvision.transform
       documentation for a comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.
   :param dataset_root: The root path of the dataset. Defaults to None, which
       means that the default location for 'mnist' will be used.

   :returns: A properly initialized :class:`NCScenario` instance.


