:mod:`avalanche.benchmarks.utils.avalanche_dataset`
===================================================

.. py:module:: avalanche.benchmarks.utils.avalanche_dataset

.. autoapi-nested-parse::

   This module contains the implementation of the Avalanche Dataset,
   which is the standard Avalanche implementation of a PyTorch dataset. Despite
   being a child class of the PyTorch Dataset, the AvalancheDataset (and its
   derivatives) is much more powerful as it offers many more features
   out-of-the-box.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.benchmarks.utils.avalanche_dataset.AvalancheDatasetType
   avalanche.benchmarks.utils.avalanche_dataset.AvalancheDataset
   avalanche.benchmarks.utils.avalanche_dataset.AvalancheSubset
   avalanche.benchmarks.utils.avalanche_dataset.AvalancheTensorDataset
   avalanche.benchmarks.utils.avalanche_dataset.AvalancheConcatDataset



Functions
~~~~~~~~~

.. autoapisummary::

   avalanche.benchmarks.utils.avalanche_dataset.concat_datasets_sequentially
   avalanche.benchmarks.utils.avalanche_dataset.as_avalanche_dataset
   avalanche.benchmarks.utils.avalanche_dataset.as_classification_dataset
   avalanche.benchmarks.utils.avalanche_dataset.as_regression_dataset
   avalanche.benchmarks.utils.avalanche_dataset.as_segmentation_dataset
   avalanche.benchmarks.utils.avalanche_dataset.as_undefined_dataset
   avalanche.benchmarks.utils.avalanche_dataset.train_eval_avalanche_datasets


.. data:: SupportedDataset
   

   

.. py:class:: AvalancheDatasetType

   Bases: :class:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   Create and return a new object.  See help(type) for accurate signature.

   .. attribute:: UNDEFINED
      

      

   .. attribute:: CLASSIFICATION
      

      

   .. attribute:: REGRESSION
      

      

   .. attribute:: SEGMENTATION
      

      


.. py:class:: AvalancheDataset(dataset: SupportedDataset, *, transform: XTransform = None, target_transform: YTransform = None, transform_groups: Dict[str, Tuple[XTransform, YTransform]] = None, initial_transform_group: str = None, task_labels: Union[int, Sequence[int]] = None, targets: Sequence[TTargetType] = None, dataset_type: AvalancheDatasetType = None, collate_fn: Callable[[List], Any] = None, targets_adapter: Callable[[Any], TTargetType] = None)

   Bases: :class:`IDatasetWithTargets[T_co, TTargetType]`, :class:`Dataset[T_co]`

   The Dataset used as the base implementation for Avalanche.

   Instances of this dataset are usually returned from benchmarks, but it can
   also be used in a completely standalone manner. This dataset can be used
   to apply transformations before returning patterns/targets, it supports
   slicing and advanced indexing and it also contains useful fields as
   `targets`, which contains the pattern labels, and `targets_task_labels`,
   which contains the pattern task labels. The `task_set` field can be used to
   obtain a the subset of patterns labeled with a given task label.

   This dataset can also be used to apply several advanced operations involving
   transformations. For instance, it allows the user to add and replace
   transformations, freeze them so that they can't be changed, etc.

   This dataset also allows the user to keep distinct transformations groups.
   Simply put, a transformation group is a pair of transform+target_transform
   (exactly as in torchvision datasets). This dataset natively supports keeping
   two transformation groups: the first, 'train', contains transformations
   applied to training patterns. Those transformations usually involve some
   kind of data augmentation. The second one is 'eval', that will contain
   transformations applied to test patterns. Having both groups can be
   useful when, for instance, in need to test on the training data (as this
   process usually involves removing data augmentation operations). Switching
   between transformations can be easily achieved by using the
   :func:`train` and :func:`eval` methods.

   Moreover, arbitrary transformation groups can be added and used. For more
   info see the constructor and the :func:`with_transforms` method.

   This dataset will try to inherit the task labels from the input
   dataset. If none are available and none are given via the `task_labels`
   parameter, each pattern will be assigned a default task label "0".
   See the constructor for more details.

   Creates a ``AvalancheDataset`` instance.

   :param dataset: The dataset to decorate. Beware that
       AvalancheDataset will not overwrite transformations already
       applied by this dataset.
   :param transform: A function/transform that takes the X value of a
       pattern from the original dataset and returns a transformed version.
   :param target_transform: A function/transform that takes in the target
       and transforms it.
   :param transform_groups: A dictionary containing the transform groups.
       Transform groups are used to quickly switch between training and
       eval (test) transformations. This becomes useful when in need to
       test on the training dataset as test transformations usually don't
       contain random augmentations. ``AvalancheDataset`` natively supports
       the 'train' and 'eval' groups by calling the ``train()`` and
       ``eval()`` methods. When using custom groups one can use the
       ``with_transforms(group_name)`` method instead. Defaults to None,
       which means that the current transforms will be used to
       handle both 'train' and 'eval' groups (just like in standard
       ``torchvision`` datasets).
   :param initial_transform_group: The name of the initial transform group
       to be used. Defaults to None, which means that the current group of
       the input dataset will be used (if an AvalancheDataset). If the
       input dataset is not an AvalancheDataset, then 'train' will be
       used.
   :param task_labels: The task label of each instance. Must be a sequence
       of ints, one for each instance in the dataset. Alternatively can be
       a single int value, in which case that value will be used as the
       task label for all the instances. Defaults to None, which means that
       the dataset will try to obtain the task labels from the original
       dataset. If no task labels could be found, a default task label
       "0" will be applied to all instances.
   :param targets: The label of each pattern. Defaults to None, which
       means that the targets will be retrieved from the dataset (if
       possible).
   :param dataset_type: The type of the dataset. Defaults to None,
       which means that the type will be inferred from the input dataset.
       When the `dataset_type` is different than UNDEFINED, a
       proper value for `collate_fn` and `targets_adapter` will be set.
       If the `dataset_type` is different than UNDEFINED, then
       `collate_fn` and `targets_adapter` must not be set.
   :param collate_fn: The function to use when slicing to merge single
       patterns. In the future this function may become the function
       used in the data loading process, too. If None and the
       `dataset_type` is UNDEFINED, the constructor will check if a
       `collate_fn` field exists in the dataset. If no such field exists,
       the default collate function will be used.
   :param targets_adapter: A function used to convert the values of the
       targets field. Defaults to None. Note: the adapter will not change
       the value of the second element returned by `__getitem__`.
       The adapter is used to adapt the values of the targets field only.

   .. attribute:: dataset_type
      

      The type of this dataset (UNDEFINED, CLASSIFICATION, ...).


   .. attribute:: targets
      :annotation: :Sequence[TTargetType]

      A sequence of values describing the label of each pattern contained in
      the dataset.


   .. attribute:: targets_task_labels
      :annotation: :Sequence[int]

      A sequence of ints describing the task label of each pattern contained 
      in the dataset.


   .. attribute:: tasks_pattern_indices
      :annotation: :Dict[int, Sequence[int]]

      A dictionary mapping task labels to the indices of the patterns with 
      that task label. If you need to obtain the subset of patterns labeled
      with a certain task label, consider using the `task_set` field.


   .. attribute:: collate_fn
      

      The collate function to use when creating mini-batches from this
      dataset.


   .. attribute:: task_set
      

      A dictionary that can be used to obtain the subset of patterns given
      a specific task label.


   .. attribute:: current_transform_group
      

      The name of the transform group currently in use.


   .. attribute:: transform_groups
      :annotation: :Dict[str, Tuple[XTransform, YTransform]]

      A dictionary containing the transform groups. Transform groups are
      used to quickly switch between training and test (eval) transformations.
      This becomes useful when in need to test on the training dataset as test
      transformations usually don't contain random augmentations.

      AvalancheDataset natively supports switching between the 'train' and
      'eval' groups by calling the ``train()`` and ``eval()`` methods. When
      using custom groups one can use the ``with_transforms(group_name)``
      method instead.

      May be null, which means that the current transforms will be used to
      handle both 'train' and 'eval' groups.


   .. attribute:: transform
      :annotation: :XTransform

      A function/transform that takes in an PIL image and returns a 
      transformed version.


   .. attribute:: target_transform
      :annotation: :YTransform

      A function/transform that takes in the target and transforms it.


   .. method:: __add__(self, other: Dataset) -> 'AvalancheDataset'


   .. method:: __radd__(self, other: Dataset) -> 'AvalancheDataset'


   .. method:: __getitem__(self, idx) -> Union[T_co, Sequence[T_co]]


   .. method:: __len__(self)


   .. method:: train(self)

      Returns a new dataset with the transformations of the 'train' group
      loaded.

      The current dataset will not be affected.

      :return: A new dataset with the training transformations loaded.


   .. method:: eval(self)

      Returns a new dataset with the transformations of the 'eval' group
      loaded.

      Eval transformations usually don't contain augmentation procedures.
      This function may be useful when in need to test on training data
      (for instance, in order to run a validation pass).

      The current dataset will not be affected.

      :return: A new dataset with the eval transformations loaded.


   .. method:: freeze_transforms(self: TAvalancheDataset) -> TAvalancheDataset

      Returns a new dataset where the current transformations are frozen.

      Frozen transformations will be permanently glued to the original
      dataset so that they can't be changed anymore. This is usually done
      when using transformations to create derived datasets: in this way
      freezing the transformations will ensure that the user won't be able
      to inadvertently change them by directly setting the transformations
      field or by using the other transformations utility methods like
      ``replace_transforms``. Please note that transformations of all groups
      will be frozen. If you want to freeze a specific group, please use
      ``freeze_group_transforms``.

      The current dataset will not be affected.

      :return: A new dataset with the current transformations frozen.


   .. method:: freeze_group_transforms(self: TAvalancheDataset, group_name: str) -> TAvalancheDataset

      Returns a new dataset where the transformations for a specific group
      are frozen.

      Frozen transformations will be permanently glued to the original
      dataset so that they can't be changed anymore. This is usually done
      when using transformations to create derived datasets: in this way
      freezing the transformations will ensure that the user won't be able
      to inadvertently change them by directly setting the transformations
      field or by using the other transformations utility methods like
      ``replace_transforms``. To freeze transformations of all groups
      please use ``freeze_transforms``.

      The current dataset will not be affected.

      :return: A new dataset with the transformations frozen for the given
          group.


   .. method:: get_transforms(self: TAvalancheDataset, transforms_group: str = None) -> Tuple[Any, Any]

      Returns the transformations given a group.

      Beware that this will not return the frozen transformations, nor the
      ones included in the wrapped dataset. Only transformations directly
      attached to this dataset will be returned.

      :param transforms_group: The transformations group. Defaults to None,
          which means that the current group is returned.
      :return: The transformation group, as a tuple
          (transform, target_transform).


   .. method:: add_transforms(self: TAvalancheDataset, transform: Callable[[Any], Any] = None, target_transform: Callable[[int], int] = None) -> TAvalancheDataset

      Returns a new dataset with the given transformations added to
      the existing ones.

      The transformations will be added to the current transformations group.
      Other transformation groups will not be affected.

      The given transformations will be added "at the end" of previous
      transformations of the current transformations group. This means
      that existing transformations will be applied to the patterns first.

      The current dataset will not be affected.

      :param transform: A function/transform that takes the X value of a
          pattern from the original dataset and returns a transformed version.
      :param target_transform: A function/transform that takes in the target
          and transforms it.
      :return: A new dataset with the added transformations.


   .. method:: add_transforms_to_group(self: TAvalancheDataset, group_name: str, transform: Callable[[Any], Any] = None, target_transform: Callable[[int], int] = None) -> TAvalancheDataset

      Returns a new dataset with the given transformations added to
      the existing ones for a certain group.

      The transformations will be added to the given transformations group.
      Other transformation groups will not be affected. The group must
      already exist.

      The given transformations will be added "at the end" of previous
      transformations of that group. This means that existing transformations
      will be applied to the patterns first.

      The current dataset will not be affected.

      :param group_name: The name of the group.
      :param transform: A function/transform that takes the X value of a
          pattern from the original dataset and returns a transformed version.
      :param target_transform: A function/transform that takes in the target
          and transforms it.
      :return: A new dataset with the added transformations.


   .. method:: replace_transforms(self: TAvalancheDataset, transform: XTransform, target_transform: YTransform, group: str = None) -> TAvalancheDataset

      Returns a new dataset with the existing transformations replaced with
      the given ones.

      The given transformations will replace the ones of the current
      transformations group. Other transformation groups will not be affected.

      If the original dataset is an instance of :class:`AvalancheDataset`,
      then transformations of the original set will be considered as well
      (the original dataset will be left untouched).

      The current dataset will not be affected.

      Note that this function will not override frozen transformations. This
      will also not affect transformations found in datasets that are not
      instances of :class:`AvalancheDataset`.

      :param transform: A function/transform that takes the X value of a
          pattern from the original dataset and returns a transformed version.
      :param target_transform: A function/transform that takes in the target
          and transforms it.
      :param group: The transforms group to replace. Defaults to None, which
          means that the current group will be replaced.
      :return: A new dataset with the new transformations.


   .. method:: with_transforms(self: TAvalancheDataset, group_name: str) -> TAvalancheDataset

      Returns a new dataset with the transformations of a different group
      loaded.

      The current dataset will not be affected.

      :param group_name: The name of the transformations group to use.
      :return: A new dataset with the new transformations.


   .. method:: add_transforms_group(self: TAvalancheDataset, group_name: str, transform: XTransform, target_transform: YTransform) -> TAvalancheDataset

      Returns a new dataset with a new transformations group.

      The current dataset will not be affected.

      This method raises an exception if a group with the same name already
      exists.

      :param group_name: The name of the new transformations group.
      :param transform: A function/transform that takes the X value of a
          pattern from the original dataset and returns a transformed version.
      :param target_transform: A function/transform that takes in the target
          and transforms it.
      :return: A new dataset with the new transformations.



.. py:class:: AvalancheSubset(dataset: SupportedDataset, indices: Sequence[int] = None, *, class_mapping: Sequence[int] = None, transform: Callable[[Any], Any] = None, target_transform: Callable[[int], int] = None, transform_groups: Dict[str, Tuple[XTransform, YTransform]] = None, initial_transform_group: str = None, task_labels: Union[int, Sequence[int]] = None, targets: Sequence[TTargetType] = None, dataset_type: AvalancheDatasetType = None, collate_fn: Callable[[List], Any] = None, targets_adapter: Callable[[Any], TTargetType] = None)

   Bases: :class:`AvalancheDataset[T_co, TTargetType]`

   A Dataset that behaves like a PyTorch :class:`torch.utils.data.Subset`.
   This Dataset also supports transformations, slicing, advanced indexing,
   the targets field, class mapping and all the other goodies listed in
   :class:`AvalancheDataset`.

   Creates an ``AvalancheSubset`` instance.

   :param dataset: The whole dataset.
   :param indices: Indices in the whole set selected for subset. Can
       be None, which means that the whole dataset will be returned.
   :param class_mapping: A list that, for each possible target (Y) value,
       contains its corresponding remapped value. Can be None.
       Beware that setting this parameter will force the final
       dataset type to be CLASSIFICATION or UNDEFINED.
   :param transform: A function/transform that takes the X value of a
       pattern from the original dataset and returns a transformed version.
   :param target_transform: A function/transform that takes in the target
       and transforms it.
   :param transform_groups: A dictionary containing the transform groups.
       Transform groups are used to quickly switch between training and
       eval (test) transformations. This becomes useful when in need to
       test on the training dataset as test transformations usually don't
       contain random augmentations. ``AvalancheDataset`` natively supports
       the 'train' and 'eval' groups by calling the ``train()`` and
       ``eval()`` methods. When using custom groups one can use the
       ``with_transforms(group_name)`` method instead. Defaults to None,
       which means that the current transforms will be used to
       handle both 'train' and 'eval' groups (just like in standard
       ``torchvision`` datasets).
   :param initial_transform_group: The name of the initial transform group
       to be used. Defaults to None, which means that the current group of
       the input dataset will be used (if an AvalancheDataset). If the
       input dataset is not an AvalancheDataset, then 'train' will be
       used.
   :param task_labels: The task label for each instance. Must be a sequence
       of ints, one for each instance in the dataset. This can either be a
       list of task labels for the original dataset or the list of task
       labels for the instances of the subset (an automatic detection will
       be made). In the unfortunate case in which the original dataset and
       the subset contain the same amount of instances, then this parameter
       is considered to contain the task labels of the subset.
       Alternatively can be a single int value, in which case
       that value will be used as the task label for all the instances.
       Defaults to None, which means that the dataset will try to
       obtain the task labels from the original dataset. If no task labels
       could be found, a default task label "0" will be applied to all
       instances.
   :param targets: The label of each pattern. Defaults to None, which
       means that the targets will be retrieved from the dataset (if
       possible). This can either be a list of target labels for the
       original dataset or the list of target labels for the instances of
       the subset (an automatic detection will be made). In the unfortunate
       case in which the original dataset and the subset contain the same
       amount of instances, then this parameter is considered to contain
       the target labels of the subset.
   :param dataset_type: The type of the dataset. Defaults to None,
       which means that the type will be inferred from the input dataset.
       When the `dataset_type` is different than UNDEFINED, a
       proper value for `collate_fn` and `targets_adapter` will be set.
       If the `dataset_type` is different than UNDEFINED, then
       `collate_fn` and `targets_adapter` must not be set.
       The only exception to this rule regards `class_mapping`.
       If `class_mapping` is set, the final dataset_type
       (as set by this parameter or detected from the subset) must be
       CLASSIFICATION or UNDEFINED.
   :param collate_fn: The function to use when slicing to merge single
       patterns. In the future this function may become the function
       used in the data loading process, too. If None and the
       `dataset_type` is UNDEFINED, the constructor will check if a
       `collate_fn` field exists in the dataset. If no such field exists,
       the default collate function will be used.
   :param targets_adapter: A function used to convert the values of the
       targets field. Defaults to None. Note: the adapter will not change
       the value of the second element returned by `__getitem__`.
       The adapter is used to adapt the values of the targets field only.


.. py:class:: AvalancheTensorDataset(*dataset_tensors: Sequence, transform: Callable[[Any], Any] = None, target_transform: Callable[[int], int] = None, transform_groups: Dict[str, Tuple[XTransform, YTransform]] = None, initial_transform_group: str = 'train', task_labels: Union[int, Sequence[int]] = None, targets: Union[Sequence[TTargetType], int] = None, dataset_type: AvalancheDatasetType = AvalancheDatasetType.UNDEFINED, collate_fn: Callable[[List], Any] = None, targets_adapter: Callable[[Any], TTargetType] = None)

   Bases: :class:`AvalancheDataset[T_co, TTargetType]`

   A Dataset that wraps existing ndarrays, Tensors, lists... to provide
   basic Dataset functionalities. Very similar to TensorDataset from PyTorch,
   this Dataset also supports transformations, slicing, advanced indexing,
   the targets field and all the other goodies listed in
   :class:`AvalancheDataset`.

   Creates a ``AvalancheTensorDataset`` instance.

   :param dataset_tensors: Sequences, Tensors or ndarrays representing the
       content of the dataset.
   :param transform: A function/transform that takes in a single element
       from the first tensor and returns a transformed version.
   :param target_transform: A function/transform that takes a single
       element of the second tensor and transforms it.
   :param transform_groups: A dictionary containing the transform groups.
       Transform groups are used to quickly switch between training and
       eval (test) transformations. This becomes useful when in need to
       test on the training dataset as test transformations usually don't
       contain random augmentations. ``AvalancheDataset`` natively supports
       the 'train' and 'eval' groups by calling the ``train()`` and
       ``eval()`` methods. When using custom groups one can use the
       ``with_transforms(group_name)`` method instead. Defaults to None,
       which means that the current transforms will be used to
       handle both 'train' and 'eval' groups (just like in standard
       ``torchvision`` datasets).
   :param initial_transform_group: The name of the transform group
       to be used. Defaults to 'train'.
   :param task_labels: The task labels for each pattern. Must be a sequence
       of ints, one for each pattern in the dataset. Alternatively can be a
       single int value, in which case that value will be used as the task
       label for all the instances. Defaults to None, which means that a
       default task label "0" will be applied to all patterns.
   :param targets: The label of each pattern. Defaults to None, which
       means that the targets will be retrieved from the dataset.
       Otherwise, can be 1) a sequence of values containing as many
       elements as the number of patterns, or 2) the index of the sequence
       to use as the targets field. When using the default value of None,
       the targets field will be populated using the second
       tensor. If dataset is made of only one tensor, then that tensor will
       be used for the targets field, too.
   :param dataset_type: The type of the dataset. Defaults to UNDEFINED.
       Setting this parameter will automatically set a proper value for
       `collate_fn` and `targets_adapter`. If this parameter is set to a
       value different from UNDEFINED then `collate_fn` and
       `targets_adapter` must not be set.
   :param collate_fn: The function to use when slicing to merge single
       patterns. In the future this function may become the function
       used in the data loading process, too.
   :param targets_adapter: A function used to convert the values of the
       targets field. Defaults to None. Note: the adapter will not change
       the value of the second element returned by `__getitem__`.
       The adapter is used to adapt the values of the targets field only.


.. py:class:: AvalancheConcatDataset(datasets: Collection[SupportedDataset], *, transform: Callable[[Any], Any] = None, target_transform: Callable[[int], int] = None, transform_groups: Dict[str, Tuple[XTransform, YTransform]] = None, initial_transform_group: str = None, task_labels: Union[int, Sequence[int], Sequence[Sequence[int]]] = None, targets: Union[Sequence[TTargetType], Sequence[Sequence[TTargetType]]] = None, dataset_type: AvalancheDatasetType = None, collate_fn: Callable[[List], Any] = None, targets_adapter: Callable[[Any], TTargetType] = None)

   Bases: :class:`AvalancheDataset[T_co, TTargetType]`

   A Dataset that behaves like a PyTorch
   :class:`torch.utils.data.ConcatDataset`. However, this Dataset also supports
   transformations, slicing, advanced indexing and the targets field and all
   the other goodies listed in :class:`AvalancheDataset`.

   This dataset guarantees that the operations involving the transformations
   and transformations groups are consistent across the concatenated dataset
   (if they are subclasses of :class:`AvalancheDataset`).

   Creates a ``AvalancheConcatDataset`` instance.

   :param datasets: A collection of datasets.
   :param transform: A function/transform that takes the X value of a
       pattern from the original dataset and returns a transformed version.
   :param target_transform: A function/transform that takes in the target
       and transforms it.
   :param transform_groups: A dictionary containing the transform groups.
       Transform groups are used to quickly switch between training and
       eval (test) transformations. This becomes useful when in need to
       test on the training dataset as test transformations usually don't
       contain random augmentations. ``AvalancheDataset`` natively supports
       the 'train' and 'eval' groups by calling the ``train()`` and
       ``eval()`` methods. When using custom groups one can use the
       ``with_transforms(group_name)`` method instead. Defaults to None,
       which means that the current transforms will be used to
       handle both 'train' and 'eval' groups (just like in standard
       ``torchvision`` datasets).
   :param initial_transform_group: The name of the initial transform group
       to be used. Defaults to None, which means that if all
       AvalancheDatasets in the input datasets list agree on a common
       group (the "current group" is the same for all datasets), then that
       group will be used as the initial one. If the list of input datasets
       does not contain an AvalancheDataset or if the AvalancheDatasets
       do not agree on a common group, then 'train' will be used.
   :param targets: The label of each pattern. Can either be a sequence of
       labels or, alternatively, a sequence containing sequences of labels
       (one for each dataset to be concatenated). Defaults to None, which
       means that the targets will be retrieved from the datasets (if
       possible).
   :param task_labels: The task labels for each pattern. Must be a sequence
       of ints, one for each pattern in the dataset. Alternatively, task
       labels can be expressed as a sequence containing sequences of ints
       (one for each dataset to be concatenated) or even a single int,
       in which case that value will be used as the task label for all
       instances. Defaults to None, which means that the dataset will try
       to obtain the task labels from the original datasets. If no task
       labels could be found for a dataset, a default task label "0" will
       be applied to all patterns of that dataset.
   :param dataset_type: The type of the dataset. Defaults to None,
       which means that the type will be inferred from the list of
       input datasets. When `dataset_type` is None and the list of datasets
       contains incompatible types, an error will be raised.
       A list of datasets is compatible if they all have
       the same type. Datasets that are not instances of `AvalancheDataset`
       and instances of `AvalancheDataset` with type `UNDEFINED`
       are always compatible with other types.
       When the `dataset_type` is different than UNDEFINED, a
       proper value for `collate_fn` and `targets_adapter` will be set.
       If the `dataset_type` is different than UNDEFINED, then
       `collate_fn` and `targets_adapter` must not be set.
   :param collate_fn: The function to use when slicing to merge single
       patterns. In the future this function may become the function
       used in the data loading process, too. If None, the constructor
       will check if a `collate_fn` field exists in the first dataset. If
       no such field exists, the default collate function will be used.
       Beware that the chosen collate function will be applied to all
       the concatenated datasets even if a different collate is defined
       in different datasets.
   :param targets_adapter: A function used to convert the values of the
       targets field. Defaults to None. Note: the adapter will not change
       the value of the second element returned by `__getitem__`.
       The adapter is used to adapt the values of the targets field only.

   .. method:: __len__(self) -> int



.. function:: concat_datasets_sequentially(train_dataset_list: Sequence[ISupportedClassificationDataset], test_dataset_list: Sequence[ISupportedClassificationDataset]) -> Tuple[AvalancheConcatDataset, AvalancheConcatDataset, List[list]]

   Concatenates a list of datasets. This is completely different from
   :class:`ConcatDataset`, in which datasets are merged together without
   other processing. Instead, this function re-maps the datasets class IDs.
   For instance:
   let the dataset[0] contain patterns of 3 different classes,
   let the dataset[1] contain patterns of 2 different classes, then class IDs
   will be mapped as follows:

   dataset[0] class "0" -> new class ID is "0"

   dataset[0] class "1" -> new class ID is "1"

   dataset[0] class "2" -> new class ID is "2"

   dataset[1] class "0" -> new class ID is "3"

   dataset[1] class "1" -> new class ID is "4"

   ... -> ...

   dataset[-1] class "C-1" -> new class ID is "overall_n_classes-1"

   In contrast, using PyTorch ConcatDataset:

   dataset[0] class "0" -> ID is "0"

   dataset[0] class "1" -> ID is "1"

   dataset[0] class "2" -> ID is "2"

   dataset[1] class "0" -> ID is "0"

   dataset[1] class "1" -> ID is "1"

   Note: ``train_dataset_list`` and ``test_dataset_list`` must have the same
   number of datasets.

   :param train_dataset_list: A list of training datasets
   :param test_dataset_list: A list of test datasets

   :returns: A concatenated dataset.


.. function:: as_avalanche_dataset(dataset: ISupportedClassificationDataset[T_co], dataset_type: AvalancheDatasetType = None) -> AvalancheDataset[T_co, TTargetType]


.. function:: as_classification_dataset(dataset: ISupportedClassificationDataset[T_co]) -> AvalancheDataset[T_co, int]


.. function:: as_regression_dataset(dataset: ISupportedClassificationDataset[T_co]) -> AvalancheDataset[T_co, Any]


.. function:: as_segmentation_dataset(dataset: ISupportedClassificationDataset[T_co]) -> AvalancheDataset[T_co, Any]


.. function:: as_undefined_dataset(dataset: ISupportedClassificationDataset[T_co]) -> AvalancheDataset[T_co, Any]


.. function:: train_eval_avalanche_datasets(train_dataset: ISupportedClassificationDataset, test_dataset: ISupportedClassificationDataset, train_transformation, eval_transformation, dataset_type=None)


