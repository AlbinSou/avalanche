:mod:`avalanche.benchmarks.datasets.downloadable_dataset`
=========================================================

.. py:module:: avalanche.benchmarks.datasets.downloadable_dataset


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.benchmarks.datasets.downloadable_dataset.DownloadableDataset
   avalanche.benchmarks.datasets.downloadable_dataset.SimpleDownloadableDataset



.. py:class:: DownloadableDataset(root: Union[str, Path], download: bool = True, verbose: bool = False)

   Bases: :class:`Dataset[T_co]`, :class:`abc.ABC`

   Base class for a downloadable dataset.

   It is recommended to extend this class if a dataset can be downloaded from
   the internet. This implementation codes the recommended behaviour for
   downloading and verifying the dataset.

   The dataset child class must implement the `_download_dataset`,
   `_load_metadata` and `_download_error_message` methods

   The child class, in its constructor, must call the already implemented
   `_load_dataset` method (otherwise nothing will happen).

   A further simplification can be obtained by extending
   :class:`SimpleDownloadableDataset` instead of this class.
   :class:`SimpleDownloadableDataset` is recommended if a single archive is to
   be downloaded and extracted to the root folder "as is".

   The standardized procedure coded by `_load_dataset` is as follows:

   - First, `_load_metadata` is called to check if the dataset can be correctly
     loaded at the `root` path. This method must check if the data found
     at the `root` path is correct and that metadata can be correctly loaded.
     If this method succeeds (by returning True) the process is completed.
   - If `_load_metadata` fails (by returning False or by raising an error),
     then a download will be attempted if the download flag was set to True.
     The download must be implemented in `_download_dataset`. The
     procedure can be drastically simplified by using the `_download_file`,
     `_extract_archive` and `_download_and_extract_archive` helpers.
   - If the download succeeds (doesn't raise an error), then `_load_metadata`
     will be called again.

   If an error occurs, the `_download_error_message` will be called to obtain
   a message (a string) to show to the user. That message should contain
   instructions on how to download and prepare the dataset manually.

   Creates an instance of a downloadable dataset.

   Consider looking at the class documentation for the precise details on
   how to extend this class.

   Beware that calling this constructor only fills the `root` field. The
   download and metadata loading procedures are triggered only by
   calling `_load_dataset`.

   :param root: The root path where the dataset will be downloaded.
       Consider passing a path obtained by calling
       `default_dataset_location` with the name of the dataset.
   :param download: If True, the dataset will be downloaded if needed.
       If False and the dataset can't be loaded from the provided root
       path, an error will be raised when calling the `_load_dataset`
       method. Defaults to True.
   :param verbose: If True, some info about the download process will be
       printed. Defaults to False.

   .. attribute:: root
      :annotation: :Path

      The path to the dataset.


   .. attribute:: download
      :annotation: :bool

      If True, the dataset will be downloaded (only if needed).


   .. attribute:: verbose
      :annotation: :bool

      If True, some info about the download process will be printed.



.. py:class:: SimpleDownloadableDataset(root_or_dataset_name: str, url: str, checksum: Optional[str], download: bool = False, verbose: bool = False)

   Bases: :class:`DownloadableDataset[T_co]`, :class:`abc.ABC`

   Base class for a downloadable dataset consisting of a single archive file.

   It is recommended to extend this class if a dataset can be downloaded from
   the internet as a single archive. For multi-file implementation or if
   a more fine-grained control is required, consider extending
   :class:`DownloadableDataset` instead.

   This is a simplified version of :class:`DownloadableDataset` where the
   following assumptions must hold:
   - The dataset is made of a single archive.
   - The archive must be extracted to the root folder "as is" (which means
       that no subdirectories must be created).

   The child class is only required to extend the `_load_metadata` method,
   which must check the dataset integrity and load the dataset metadata.

   Apart from that, the same assumptions of :class:`DownloadableDataset` hold.
   Remember to call the `_load_dataset` method in the child class constructor.

   Creates an instance of a simple downloadable dataset.

   Consider looking at the class documentation for the precise details on
   how to extend this class.

   Beware that calling this constructor only fills the `root` field. The
   download and metadata loading procedures are triggered only by
   calling `_load_dataset`.

   :param root_or_dataset_name: The root path where the dataset will be
       downloaded. If a directory name is passed, then the root obtained by
       calling `default_dataset_location` will be used (recommended).
       To check if this parameter is a path, the constructor will check if
       it contains the '' or '/' characters or if it is a Path instance.
   :param url: The url of the archive.
   :param checksum: The MD5 hash to use when verifying the downloaded
       archive. Can be None, in which case the check will be skipped.
       It is recommended to always fill this parameter.
   :param download: If True, the dataset will be downloaded if needed.
       If False and the dataset can't be loaded from the provided root
       path, an error will be raised when calling the `_load_dataset`
       method. Defaults to False.
   :param verbose: If True, some info about the download process will be
       printed. Defaults to False.


