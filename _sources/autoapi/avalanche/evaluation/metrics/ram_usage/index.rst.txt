:mod:`avalanche.evaluation.metrics.ram_usage`
=============================================

.. py:module:: avalanche.evaluation.metrics.ram_usage


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.evaluation.metrics.ram_usage.MaxRAM
   avalanche.evaluation.metrics.ram_usage.MinibatchMaxRAM
   avalanche.evaluation.metrics.ram_usage.EpochMaxRAM
   avalanche.evaluation.metrics.ram_usage.ExperienceMaxRAM
   avalanche.evaluation.metrics.ram_usage.StreamMaxRAM



Functions
~~~~~~~~~

.. autoapisummary::

   avalanche.evaluation.metrics.ram_usage.ram_usage_metrics


.. py:class:: MaxRAM(every=1)

   Bases: :class:`Metric[float]`

   The standalone RAM usage metric.
   Important: this metric approximates the real maximum RAM usage since
   it sample at discrete amount of time the RAM values.

   Instances of this metric keeps the maximum RAM usage detected.
   The `start_thread` method starts the usage tracking.
   The `stop_thread` method stops the tracking.

   The result, obtained using the `result` method, is the usage in mega-bytes.

   The reset method will bring the metric to its initial state. By default
   this metric in its initial state will return an usage value of 0.

   Creates an instance of the RAM usage metric.
   :param every: seconds after which update the maximum RAM
       usage

   .. attribute:: stop_f
      :annotation: = False

      Flag to stop the thread


   .. attribute:: max_usage
      :annotation: = 0

      Main metric result. Max RAM usage.


   .. attribute:: thread
      

      Thread executing RAM monitoring code


   .. method:: result(self) -> Optional[float]

      Retrieves the RAM usage.

      Calling this method will not change the internal state of the metric.

      :return: The average RAM usage in bytes, as a float value.


   .. method:: start_thread(self)


   .. method:: stop_thread(self)


   .. method:: reset(self) -> None

      Resets the metric.

      :return: None.


   .. method:: update(self)



.. py:class:: MinibatchMaxRAM(every=1)

   Bases: :class:`avalanche.evaluation.metrics.ram_usage.RAMPluginMetric`

   The Minibatch Max RAM metric.
   This plugin metric only works at training time.

   Creates an instance of the Minibatch Max RAM metric
   :param every: seconds after which update the maximum RAM
       usage

   .. method:: before_training(self, strategy: BaseStrategy) -> None


   .. method:: after_training(self, strategy: BaseStrategy) -> None


   .. method:: __str__(self)



.. py:class:: EpochMaxRAM(every=1)

   Bases: :class:`avalanche.evaluation.metrics.ram_usage.RAMPluginMetric`

   The Epoch Max RAM metric.
   This plugin metric only works at training time.

   Creates an instance of the epoch Max RAM metric.
   :param every: seconds after which update the maximum RAM
       usage

   .. method:: before_training(self, strategy: BaseStrategy) -> None


   .. method:: after_training(self, strategy: BaseStrategy) -> None


   .. method:: __str__(self)



.. py:class:: ExperienceMaxRAM(every=1)

   Bases: :class:`avalanche.evaluation.metrics.ram_usage.RAMPluginMetric`

   The Experience Max RAM metric.
   This plugin metric only works at eval time.

   Creates an instance of the Experience CPU usage metric.
   :param every: seconds after which update the maximum RAM
       usage

   .. method:: before_eval(self, strategy: BaseStrategy) -> None


   .. method:: after_eval(self, strategy: BaseStrategy) -> None


   .. method:: __str__(self)



.. py:class:: StreamMaxRAM(every=1)

   Bases: :class:`avalanche.evaluation.metrics.ram_usage.RAMPluginMetric`

   The Stream Max RAM metric.
   This plugin metric only works at eval time.

   Creates an instance of the Experience CPU usage metric.
   :param every: seconds after which update the maximum RAM
       usage

   .. method:: before_eval(self, strategy)


   .. method:: after_eval(self, strategy: BaseStrategy) -> MetricResult


   .. method:: __str__(self)



.. function:: ram_usage_metrics(*, every=1, minibatch=False, epoch=False, experience=False, stream=False) -> List[PluginMetric]

   Helper method that can be used to obtain the desired set of
   plugin metrics.

   :param every: seconds after which update the maximum RAM
       usage
   :param minibatch: If True, will return a metric able to log the minibatch
       max RAM usage.
   :param epoch: If True, will return a metric able to log the epoch
       max RAM usage.
   :param experience: If True, will return a metric able to log the experience
       max RAM usage.
   :param stream: If True, will return a metric able to log the evaluation
       max stream RAM usage.

   :return: A list of plugin metrics.


