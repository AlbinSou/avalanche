:mod:`avalanche.evaluation.metrics.gpu_usage`
=============================================

.. py:module:: avalanche.evaluation.metrics.gpu_usage


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.evaluation.metrics.gpu_usage.MaxGPU
   avalanche.evaluation.metrics.gpu_usage.MinibatchMaxGPU
   avalanche.evaluation.metrics.gpu_usage.EpochMaxGPU
   avalanche.evaluation.metrics.gpu_usage.ExperienceMaxGPU
   avalanche.evaluation.metrics.gpu_usage.StreamMaxGPU



Functions
~~~~~~~~~

.. autoapisummary::

   avalanche.evaluation.metrics.gpu_usage.gpu_usage_metrics


.. py:class:: MaxGPU(gpu_id, every=0.5)

   Bases: :class:`Metric[float]`

   The standalone GPU usage metric.
   Important: this metric approximates the real maximum GPU percentage
    usage since it sample at discrete amount of time the GPU values.

   Instances of this metric keeps the maximum GPU usage percentage detected.
   The `start_thread` method starts the usage tracking.
   The `stop_thread` method stops the tracking.

   The result, obtained using the `result` method, is the usage in mega-bytes.

   The reset method will bring the metric to its initial state. By default
   this metric in its initial state will return an usage value of 0.

   Creates an instance of the GPU usage metric.

   :param gpu_id: GPU device ID.
   :param every: seconds after which update the maximum GPU
       usage

   .. attribute:: thread
      

      Thread executing GPU monitoring code


   .. attribute:: stop_f
      :annotation: = False

      Flag to stop the thread


   .. attribute:: max_usage
      :annotation: = 0

      Main metric result. Max GPU usage.


   .. method:: start_thread(self)


   .. method:: stop_thread(self)


   .. method:: reset(self) -> None

      Resets the metric.

      :return: None.


   .. method:: result(self) -> Optional[float]

      Returns the max GPU percentage value.

      :return: The percentage GPU usage as a float value in range [0, 1].



.. py:class:: MinibatchMaxGPU(gpu_id, every=0.5)

   Bases: :class:`PluginMetric[float]`

   The Minibatch Max GPU metric.
   This plugin metric only works at training time.

   Creates an instance of the Minibatch Max GPU metric

   :param gpu_id: GPU device ID.
   :param every: seconds after which update the maximum GPU
       usage

   .. method:: before_training(self, strategy: BaseStrategy) -> None

      Called before `train` by the `BaseStrategy`. 


   .. method:: before_training_iteration(self, strategy: BaseStrategy) -> None

      Called before the start of a training iteration by the
      `BaseStrategy`. 


   .. method:: after_training_iteration(self, strategy: BaseStrategy) -> MetricResult

      Called after the end of a training iteration by the
      `BaseStrategy`. 


   .. method:: after_training(self, strategy: BaseStrategy) -> None

      Called after `train` by the `BaseStrategy`. 


   .. method:: reset(self) -> None


   .. method:: result(self) -> float


   .. method:: __str__(self)

      Return str(self).



.. py:class:: EpochMaxGPU(gpu_id, every=0.5)

   Bases: :class:`PluginMetric[float]`

   The Epoch Max GPU metric.
   This plugin metric only works at training time.

   Creates an instance of the epoch Max GPU metric.

   :param gpu_id: GPU device ID.
   :param every: seconds after which update the maximum GPU
       usage

   .. method:: before_training(self, strategy: BaseStrategy) -> None

      Called before `train` by the `BaseStrategy`. 


   .. method:: before_training_epoch(self, strategy) -> MetricResult

      Called before `train_epoch` by the `BaseStrategy`. 


   .. method:: after_training_epoch(self, strategy: BaseStrategy) -> MetricResult

      Called after `train_epoch` by the `BaseStrategy`. 


   .. method:: after_training(self, strategy: BaseStrategy) -> None

      Called after `train` by the `BaseStrategy`. 


   .. method:: reset(self) -> None


   .. method:: result(self) -> float


   .. method:: __str__(self)

      Return str(self).



.. py:class:: ExperienceMaxGPU(gpu_id, every=0.5)

   Bases: :class:`PluginMetric[float]`

   The Experience Max GPU metric.
   This plugin metric only works at eval time.

   Creates an instance of the Experience CPU usage metric.

   :param gpu_id: GPU device ID.
   :param every: seconds after which update the maximum GPU
       usage

   .. method:: before_eval(self, strategy: BaseStrategy) -> None

      Called before `eval` by the `BaseStrategy`. 


   .. method:: before_eval_exp(self, strategy) -> MetricResult

      Called before `eval_exp` by the `BaseStrategy`. 


   .. method:: after_eval_exp(self, strategy: BaseStrategy) -> MetricResult

      Called after `eval_exp` by the `BaseStrategy`. 


   .. method:: after_eval(self, strategy: BaseStrategy) -> None

      Called after `eval` by the `BaseStrategy`. 


   .. method:: reset(self) -> None


   .. method:: result(self) -> float


   .. method:: __str__(self)

      Return str(self).



.. py:class:: StreamMaxGPU(gpu_id, every=0.5)

   Bases: :class:`PluginMetric[float]`

   The Stream Max GPU metric.
   This plugin metric only works at eval time.

   Creates an instance of the Experience CPU usage metric.

   :param gpu_id: GPU device ID.
   :param every: seconds after which update the maximum GPU
       usage

   .. method:: before_eval(self, strategy) -> MetricResult

      Called before `eval` by the `BaseStrategy`. 


   .. method:: after_eval(self, strategy: BaseStrategy) -> MetricResult

      Called after `eval` by the `BaseStrategy`. 


   .. method:: reset(self) -> None


   .. method:: result(self) -> float


   .. method:: __str__(self)

      Return str(self).



.. function:: gpu_usage_metrics(gpu_id, every=0.5, minibatch=False, epoch=False, experience=False, stream=False) -> List[PluginMetric]

   Helper method that can be used to obtain the desired set of
   plugin metrics.

   :param gpu_id: GPU device ID.
   :param every: seconds after which update the maximum GPU
       usage
   :param minibatch: If True, will return a metric able to log the minibatch
       max GPU usage.
   :param epoch: If True, will return a metric able to log the epoch
       max GPU usage.
   :param experience: If True, will return a metric able to log the experience
       max GPU usage.
   :param stream: If True, will return a metric able to log the evaluation
       max stream GPU usage.

   :return: A list of plugin metrics.


