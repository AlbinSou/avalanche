:mod:`avalanche.evaluation.metrics.accuracy`
============================================

.. py:module:: avalanche.evaluation.metrics.accuracy


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.evaluation.metrics.accuracy.Accuracy
   avalanche.evaluation.metrics.accuracy.MinibatchAccuracy
   avalanche.evaluation.metrics.accuracy.EpochAccuracy
   avalanche.evaluation.metrics.accuracy.RunningEpochAccuracy
   avalanche.evaluation.metrics.accuracy.ExperienceAccuracy
   avalanche.evaluation.metrics.accuracy.StreamAccuracy



Functions
~~~~~~~~~

.. autoapisummary::

   avalanche.evaluation.metrics.accuracy.accuracy_metrics


.. py:class:: Accuracy

   Bases: :class:`Metric[float]`

   The Accuracy metric. This is a standalone metric.

   The metric keeps a dictionary of <task_label, accuracy value> pairs.
   and update the values through a running average over multiple
   <prediction, target> pairs of Tensors, provided incrementally.
   The "prediction" and "target" tensors may contain plain labels or
   one-hot/logit vectors.

   Each time `result` is called, this metric emits the average accuracy
   across all predictions made since the last `reset`.

   The reset method will bring the metric to its initial state. By default
   this metric in its initial state will return an accuracy value of 0.

   Creates an instance of the standalone Accuracy metric.

   By default this metric in its initial state will return an accuracy
   value of 0. The metric can be updated by using the `update` method
   while the running accuracy can be retrieved using the `result` method.

   .. method:: update(self, predicted_y: Tensor, true_y: Tensor, task_labels: Union[float, Tensor]) -> None

      Update the running accuracy given the true and predicted labels.
      Parameter `task_labels` is used to decide how to update the inner
      dictionary: if Float, only the dictionary value related to that task
      is updated. If Tensor, all the dictionary elements belonging to the
      task labels will be updated.

      :param predicted_y: The model prediction. Both labels and logit vectors
          are supported.
      :param true_y: The ground truth. Both labels and one-hot vectors
          are supported.
      :param task_labels: the int task label associated to the current
          experience or the task labels vector showing the task label
          for each pattern.

      :return: None.


   .. method:: result(self, task_label=None) -> Dict[int, float]

      Retrieves the running accuracy.

      Calling this method will not change the internal state of the metric.

      :param task_label: if None, return the entire dictionary of accuracies
          for each task. Otherwise return the dictionary
          `{task_label: accuracy}`.
      :return: A dict of running accuracies for each task label,
          where each value is a float value between 0 and 1.


   .. method:: reset(self, task_label=None) -> None

      Resets the metric.
      :param task_label: if None, reset the entire dictionary.
          Otherwise, reset the value associated to `task_label`.

      :return: None.



.. py:class:: MinibatchAccuracy

   Bases: :class:`avalanche.evaluation.metrics.accuracy.AccuracyPluginMetric`

   The minibatch plugin accuracy metric.
   This metric only works at training time.

   This metric computes the average accuracy over patterns
   from a single minibatch.
   It reports the result after each iteration.

   If a more coarse-grained logging is needed, consider using
   :class:`EpochAccuracy` instead.

   Creates an instance of the MinibatchAccuracy metric.

   .. method:: __str__(self)



.. py:class:: EpochAccuracy

   Bases: :class:`avalanche.evaluation.metrics.accuracy.AccuracyPluginMetric`

   The average accuracy over a single training epoch.
   This plugin metric only works at training time.

   The accuracy will be logged after each training epoch by computing
   the number of correctly predicted patterns during the epoch divided by
   the overall number of patterns encountered in that epoch.

   Creates an instance of the EpochAccuracy metric.

   .. method:: __str__(self)



.. py:class:: RunningEpochAccuracy

   Bases: :class:`avalanche.evaluation.metrics.accuracy.AccuracyPluginMetric`

   The average accuracy across all minibatches up to the current
   epoch iteration.
   This plugin metric only works at training time.

   At each iteration, this metric logs the accuracy averaged over all patterns
   seen so far in the current epoch.
   The metric resets its state after each training epoch.

   Creates an instance of the RunningEpochAccuracy metric.

   .. method:: __str__(self)



.. py:class:: ExperienceAccuracy

   Bases: :class:`avalanche.evaluation.metrics.accuracy.AccuracyPluginMetric`

   At the end of each experience, this plugin metric reports
   the average accuracy over all patterns seen in that experience.
   This metric only works at eval time.

   Creates an instance of ExperienceAccuracy metric

   .. method:: __str__(self)



.. py:class:: StreamAccuracy

   Bases: :class:`avalanche.evaluation.metrics.accuracy.AccuracyPluginMetric`

   At the end of the entire stream of experiences, this plugin metric
   reports the average accuracy over all patterns seen in all experiences.
   This metric only works at eval time.

   Creates an instance of StreamAccuracy metric

   .. method:: __str__(self)



.. function:: accuracy_metrics(*, minibatch=False, epoch=False, epoch_running=False, experience=False, stream=False) -> List[PluginMetric]

   Helper method that can be used to obtain the desired set of
   plugin metrics.

   :param minibatch: If True, will return a metric able to log
       the minibatch accuracy at training time.
   :param epoch: If True, will return a metric able to log
       the epoch accuracy at training time.
   :param epoch_running: If True, will return a metric able to log
       the running epoch accuracy at training time.
   :param experience: If True, will return a metric able to log
       the accuracy on each evaluation experience.
   :param stream: If True, will return a metric able to log
       the accuracy averaged over the entire evaluation stream of experiences.

   :return: A list of plugin metrics.


