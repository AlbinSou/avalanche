:mod:`avalanche.evaluation.metrics.mac`
=======================================

.. py:module:: avalanche.evaluation.metrics.mac


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.evaluation.metrics.mac.MAC
   avalanche.evaluation.metrics.mac.MinibatchMAC
   avalanche.evaluation.metrics.mac.EpochMAC
   avalanche.evaluation.metrics.mac.ExperienceMAC



Functions
~~~~~~~~~

.. autoapisummary::

   avalanche.evaluation.metrics.mac.MAC_metrics


.. py:class:: MAC

   Bases: :class:`Metric[int]`

   Standalone Multiply-and-accumulate metric. Provides a lower bound of the
   computational cost of a model in a hardware-independent way by
   computing the number of multiplications. Currently supports only
   Linear or Conv2d modules. Other operations are ignored.

   Creates an instance of the MAC metric.

   .. method:: update(self, model: Module, dummy_input: Tensor)

      Computes the MAC metric.

      :param model: current model.
      :param dummy_input: A tensor of the correct size to feed as input
          to model. It includes batch size
      :return: MAC metric.


   .. method:: result(self) -> Optional[int]

      Return the number of MAC operations as computed in the previous call
      to the `update` method.

      :return: The number of MAC operations or None if `update` has not been
          called yet.


   .. method:: reset(self)

      Resets the metric internal state.

      :return: None.


   .. method:: update_compute_cost(self, module, dummy_input, output)


   .. method:: is_recognized_module(mod)
      :staticmethod:



.. py:class:: MinibatchMAC

   Bases: :class:`avalanche.evaluation.metrics.mac.MACPluginMetric`

   The minibatch MAC metric.
   This plugin metric only works at training time.

   This metric computes the MAC over 1 pattern
   from a single minibatch.
   It reports the result after each iteration.

   If a more coarse-grained logging is needed, consider using
   :class:`EpochMAC` instead.

   Creates an instance of the MinibatchMAC metric.

   .. method:: __str__(self)

      Return str(self).



.. py:class:: EpochMAC

   Bases: :class:`avalanche.evaluation.metrics.mac.MACPluginMetric`

   The MAC at the end of each epoch computed on a
   single pattern.
   This plugin metric only works at training time.

   The MAC will be logged after each training epoch.

   Creates an instance of the EpochMAC metric.

   .. method:: __str__(self)

      Return str(self).



.. py:class:: ExperienceMAC

   Bases: :class:`avalanche.evaluation.metrics.mac.MACPluginMetric`

   At the end of each experience, this metric reports the
   MAC computed on a single pattern.
   This plugin metric only works at eval time.

   Creates an instance of ExperienceMAC metric

   .. method:: __str__(self)

      Return str(self).



.. function:: MAC_metrics(*, minibatch=False, epoch=False, experience=False) -> List[PluginMetric]

   Helper method that can be used to obtain the desired set of
   plugin metrics.

   :param minibatch: If True, will return a metric able to log
       the MAC after each iteration at training time.
   :param epoch: If True, will return a metric able to log
       the MAC after each epoch at training time.
   :param experience: If True, will return a metric able to log
       the MAC after each eval experience.

   :return: A list of plugin metrics.


