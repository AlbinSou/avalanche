:mod:`avalanche.evaluation.metric_utils`
========================================

.. py:module:: avalanche.evaluation.metric_utils


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   avalanche.evaluation.metric_utils.default_cm_image_creator
   avalanche.evaluation.metric_utils.repartition_pie_chart_image_creator
   avalanche.evaluation.metric_utils.repartition_bar_chart_image_creator
   avalanche.evaluation.metric_utils.default_history_repartition_image_creator
   avalanche.evaluation.metric_utils.get_task_label
   avalanche.evaluation.metric_utils.stream_type
   avalanche.evaluation.metric_utils.phase_and_task
   avalanche.evaluation.metric_utils.bytes2human
   avalanche.evaluation.metric_utils.get_metric_name


.. function:: default_cm_image_creator(confusion_matrix_tensor: Tensor, display_labels: Sequence = None, include_values=False, xticks_rotation=0, yticks_rotation=0, values_format=None, cmap='viridis', image_title='')

   The default Confusion Matrix image creator.
   Code adapted from
   `Scikit learn <https://scikit-learn.org/stable/modules/generated/sklearn.metrics.plot_confusion_matrix.html>`_ # noqa

   :param confusion_matrix_tensor: The tensor describing the confusion matrix.
       This can be easily obtained through Scikit-learn `confusion_matrix`
       utility.
   :param display_labels: Target names used for plotting. By default, `labels`
       will be used if it is defined, otherwise the values will be inferred by
       the matrix tensor.
   :param include_values: Includes values in confusion matrix. Defaults to
       `False`.
   :param xticks_rotation: Rotation of xtick labels. Valid values are
       float point value. Defaults to 0.
   :param yticks_rotation: Rotation of ytick labels. Valid values are
       float point value. Defaults to 0.
   :param values_format: Format specification for values in confusion matrix.
       Defaults to `None`, which means that the format specification is
       'd' or '.2g', whichever is shorter.
   :param cmap: Must be a str or a Colormap recognized by matplotlib.
       Defaults to 'viridis'.
   :param image_title: The title of the image. Defaults to an empty string.
   :return: The Confusion Matrix as a PIL Image.


.. function:: repartition_pie_chart_image_creator(label2counts: Dict[int, List[int]], counters: List[int], colors: Union[ndarray, Iterable, int, float] = SEABORN_COLORS, fmt: str = '%1.1f%%')

   Create a pie chart representing the labels repartition.

   :param label2counts: A dict holding the counts for each label, of the form
       {label: [count_at_step_0, count_at_step_1, ...]}. Only the last count of
       each label is used here.
   :param counters: (unused) The steps the counts were taken at.
   :param colors: The colors to use in the chart.
   :param fmt: Formatting used to display the text values in the chart.


.. function:: repartition_bar_chart_image_creator(label2counts: Dict[int, List[int]], counters: List[int], colors: Union[ndarray, Iterable, int, float] = SEABORN_COLORS)

   Create a bar chart representing the labels repartition.

   :param label2counts: A dict holding the counts for each label, of the form
       {label: [count_at_step_0, count_at_step_1, ...]}. Only the last count of
       each label is used here.
   :param counters: (unused) The steps the counts were taken at.
   :param colors: The colors to use in the chart.


.. function:: default_history_repartition_image_creator(label2counts: Dict[int, List[int]], counters: List[int], colors: Union[ndarray, Iterable, int, float] = SEABORN_COLORS)

   Create a stack plot representing the labels repartition with their history.

   :param label2counts: A dict holding the counts for each label, of the form
       {label: [count_at_step_0, count_at_step_1, ...]}.
   :param counters: The steps the counts were taken at.
   :param colors: The colors to use in the chart.


.. function:: get_task_label(strategy: BaseStrategy) -> int

   Returns the current task label.

   The current task label depends on the phase. During the training
   phase, the task label is the one defined in the "train_task_label"
   field. On the contrary, during the eval phase the task label is the one
   defined in the "eval_task_label" field.

   :param strategy: The strategy instance to get the task label from.
   :return: The current train or eval task label.


.. function:: stream_type(experience: Experience) -> str

   Returns the stream name from which the experience belongs to.
   e.g. the experience can be part of train or test stream.

   :param experience: the instance of the experience


.. function:: phase_and_task(strategy: BaseStrategy) -> Tuple[str, int]

   Returns the current phase name and the associated task label.

   The current task label depends on the phase. During the training
   phase, the task label is the one defined in the "train_task_label"
   field. On the contrary, during the eval phase the task label is the one
   defined in the "eval_task_label" field.

   :param strategy: The strategy instance to get the task label from.
   :return: The current phase name as either "Train" or "Task" and the
       associated task label.


.. function:: bytes2human(n)


.. function:: get_metric_name(metric: PluginMetric, strategy: BaseStrategy, add_experience=False, add_task=True)

   Return the complete metric name used to report its current value.
   The name is composed by:
   metric string representation /phase type/stream type/task id
   where metric string representation is a synthetic string
   describing the metric, phase type describe if the user
   is training (train) or evaluating (eval), stream type describes
   the type of stream the current experience belongs to (e.g. train, test)
   and task id is the current task label.

   :param metric: the metric object for which return the complete name
   :param strategy: the current strategy object
   :param add_experience: if True, add eval_exp_id to the main metric name.
           Default to False.
   :param add_task: if True the main metric name will include the task
       information. Otherwise, it will not.


