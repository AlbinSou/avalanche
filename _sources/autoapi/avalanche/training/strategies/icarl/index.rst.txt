:mod:`avalanche.training.strategies.icarl`
==========================================

.. py:module:: avalanche.training.strategies.icarl


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.training.strategies.icarl.ICaRL



.. py:class:: ICaRL(feature_extractor: Module, classifier: Module, optimizer: Optimizer, memory_size, buffer_transform, fixed_memory, criterion=ICaRLLossPlugin(), train_mb_size: int = 1, train_epochs: int = 1, eval_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None, evaluator: EvaluationPlugin = default_logger, eval_every=-1)

   Bases: :class:`avalanche.training.strategies.BaseStrategy`

   iCaRL Strategy.
   This strategy does not use task identities.

   :param feature_extractor: The feature extractor.
   :param classifier: The differentiable classifier that takes as input
       the output of the feature extractor.
   :param optimizer: The optimizer to use.
   :param memory_size: The nuber of patterns saved in the memory.
   :param buffer_transform: transform applied on buffer elements already
       modified by test_transform (if specified) before being used for
        replay
   :param fixed_memory: If True a memory of size memory_size is
       allocated and partitioned between samples from the observed
       experiences. If False every time a new class is observed
       memory_size samples of that class are added to the memory.
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param eval_mb_size: The eval minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.
   :param evaluator: (optional) instance of EvaluationPlugin for logging
       and metric computations.
   :param eval_every: the frequency of the calls to `eval` inside the
       training loop.
           if -1: no evaluation during training.
           if  0: calls `eval` after the final epoch of each training
               experience.
           if >0: calls `eval` every `eval_every` epochs and at the end
               of all the epochs for a single experience.


