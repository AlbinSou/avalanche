:mod:`avalanche.training.strategies.deep_slda`
==============================================

.. py:module:: avalanche.training.strategies.deep_slda


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.training.strategies.deep_slda.StreamingLDA



.. py:class:: StreamingLDA(slda_model, criterion, input_size, num_classes, output_layer_name=None, shrinkage_param=0.0001, streaming_update_sigma=True, train_epochs: int = 1, train_mb_size: int = 1, eval_mb_size: int = 1, device='cpu', plugins: Optional[Sequence['StrategyPlugin']] = None, evaluator=default_logger, eval_every=-1)

   Bases: :class:`avalanche.training.strategies.BaseStrategy`

   Init function for the SLDA model.
   :param slda_model: a PyTorch model
   :param criterion: loss function
   :param output_layer_name: if not None, wrap model to retrieve
       only the `output_layer_name` output. If None, the strategy
       assumes that the model already produces a valid output.
       You can use `FeatureExtractorBackbone` class to create your custom
       SLDA-compatible model.
   :param input_size: feature dimension
   :param num_classes: number of total classes in stream
   :param train_mb_size: batch size for feature extractor during
       training. Fit will be called on a single pattern at a time.
   :param eval_mb_size: batch size for inference
   :param shrinkage_param: value of the shrinkage parameter
   :param streaming_update_sigma: True if sigma is plastic else False
   feature extraction in `self.feature_extraction_wrapper'
   :param plugins: list of StrategyPlugins
   :param evaluator: Evaluation Plugin instance
   :param eval_every: run eval every `eval_every` epochs.
       See `BaseStrategy` for details.

   .. attribute:: DISABLED_CALLBACKS
      :annotation: = ['before_backward', 'after_backward']

      Deep Streaming Linear Discriminant Analysis.
      This strategy does not use backpropagation.
      Minibatches are first passed to the pretrained feature extractor.
      The result is processed one element at a time to fit the
      LDA.
      Original paper:
      "Hayes et. al., Lifelong Machine Learning with Deep Streaming Linear
      Discriminant Analysis, CVPR Workshop, 2020"
      https://openaccess.thecvf.com/content_CVPRW_2020/papers/w15/Hayes_Lifelong_Machine_Learning_With_Deep_Streaming_Linear_Discriminant_Analysis_CVPRW_2020_paper.pdf


   .. method:: forward(self, return_features=False)


   .. method:: training_epoch(self, **kwargs)

      Training epoch.
      :param kwargs:
      :return:


   .. method:: make_optimizer(self)


   .. method:: fit(self, x, y)

      Fit the SLDA model to a new sample (x,y).
      :param x: a torch tensor of the input data (must be a vector)
      :param y: a torch tensor of the input label
      :return: None


   .. method:: predict(self, X)

      Make predictions on test data X.
      :param X: a torch tensor that contains N data samples (N x d)
      :param return_probas: True if the user would like probabilities instead
      of predictions returned
      :return: the test predictions or probabilities


   .. method:: fit_base(self, X, y)

      Fit the SLDA model to the base data.
      :param X: an Nxd torch tensor of base initialization data
      :param y: an Nx1-dimensional torch tensor of the associated labels for X
      :return: None


   .. method:: save_model(self, save_path, save_name)

      Save the model parameters to a torch file.
      :param save_path: the path where the model will be saved
      :param save_name: the name for the saved file
      :return:


   .. method:: load_model(self, save_path, save_name)

      Load the model parameters into StreamingLDA object.
      :param save_path: the path where the model is saved
      :param save_name: the name of the saved file
      :return:



