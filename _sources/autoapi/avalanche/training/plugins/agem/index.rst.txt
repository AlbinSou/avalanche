:mod:`avalanche.training.plugins.agem`
======================================

.. py:module:: avalanche.training.plugins.agem


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.training.plugins.agem.AGEMPlugin



.. py:class:: AGEMPlugin(patterns_per_experience: int, sample_size: int)

   Bases: :class:`avalanche.training.plugins.strategy_plugin.StrategyPlugin`

   Average Gradient Episodic Memory Plugin.
   AGEM projects the gradient on the current minibatch by using an external
   episodic memory of patterns from previous experiences. If the dot product
   between the current gradient and the (average) gradient of a randomly
   sampled set of memory examples is negative, the gradient is projected.
   This plugin does not use task identities.

   :param patterns_per_experience: number of patterns per experience in the
       memory.
   :param sample_size: number of patterns in memory sample when computing
       reference gradient.

   .. method:: before_training_iteration(self, strategy, **kwargs)

      Compute reference gradient on memory sample.


   .. method:: after_backward(self, strategy, **kwargs)

      Project gradient based on reference gradients


   .. method:: after_training_exp(self, strategy, **kwargs)

      Update replay memory with patterns from current experience. 


   .. method:: sample_from_memory(self)

      Sample a minibatch from memory.
      Return a tuple of patterns (tensor), targets (tensor).


   .. method:: update_memory(self, dataset)

      Update replay memory with patterns from current experience.



