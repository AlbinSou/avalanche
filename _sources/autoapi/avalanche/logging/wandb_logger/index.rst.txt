:mod:`avalanche.logging.wandb_logger`
=====================================

.. py:module:: avalanche.logging.wandb_logger

.. autoapi-nested-parse::

   This module handles all the functionalities related to the logging of
   Avalanche experiments using Weights & Biases. 



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.logging.wandb_logger.WandBLogger



.. py:class:: WandBLogger(project_name: str = 'Avalanche', run_name: str = 'Test', log_artifacts: bool = False, path: Union[str, Path] = 'Checkpoints', uri: str = None, sync_tfboard: bool = False, save_code: bool = True, config: object = None, dir: Union[str, Path] = None, params: dict = None)

   Bases: :class:`avalanche.logging.StrategyLogger`

   The `WandBLogger` provides an easy integration with
   Weights & Biases logging. Each monitored metric is automatically
   logged to a dedicated Weights & Biases project dashboard.

   External storage for W&B Artifacts (for instance - AWS S3 and GCS
   buckets) uri are supported.

   The wandb log files are placed by default in "./wandb/" unless specified.

   .. note::
       TensorBoard can be synced on to the W&B dedicated dashboard.

   Creates an instance of the `WandBLogger`.
   :param project_name: Name of the W&B project.
   :param run_name: Name of the W&B run.
   :param log_artifacts: Option to log model weights as W&B Artifacts.
   :param path: Path to locally save the model checkpoints.
   :param uri: URI identifier for external storage buckets (GCS, S3).
   :param sync_tfboard: Syncs TensorBoard to the W&B dashboard UI.
   :param save_code: Saves the main training script to W&B. 
   :param config: Syncs hyper-parameters and config values used to W&B.
   :param dir: Path to the local log directory for W&B logs to be saved at.
   :param params: All arguments for wandb.init() function call. 
    Visit https://docs.wandb.ai/ref/python/init to learn about all 
    wand.init() parameters.

   .. method:: import_wandb(self)


   .. method:: args_parse(self)


   .. method:: before_run(self)


   .. method:: log_metric(self, metric_value: MetricValue, callback: str)

      This abstract method will has to be implemented by child classes.
      This method will be invoked on each callback.
      The `callback` parameter describes the callback from which the metric
      value is coming from.

      :param metric_value: The value to be logged.
      :param callback: The name of the callback (event) from which the
          metric value was obtained.
      :return: None



